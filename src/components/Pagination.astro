---
interface Props {
  page: number;
  totalPages: number;
  pageHref: (n: number) => string;
}

const { page, totalPages, pageHref } = Astro.props as Props;
import styles from "./Pagination/pagination.module.css";
import Icon from "./Icon.astro";

function clamp(n: number, min: number, max: number) {
  return Math.max(min, Math.min(n, max));
}

function getPageWindow(current: number, total: number, size: number): number[] {
  const half = Math.floor(size / 2);
  let start = clamp(current - half, 1, Math.max(1, total - size + 1));
  let end = Math.min(total, start + size - 1);
  start = Math.max(1, end - size + 1);
  return Array.from({ length: end - start + 1 }, (_, i) => start + i);
}

// Desktop/Tablet: window of 4 page numbers
const windowPages = getPageWindow(page, totalPages, 4);
const showLeadingEllipsis = windowPages[0] > 2;
const showTrailingEllipsis = windowPages[windowPages.length - 1] < totalPages - 1;

// Determine which window items to hide on mobile to show max 2 numbers
const mobileHideIdx = (() => {
  const len = windowPages.length;
  const currentIdx = windowPages.indexOf(page);
  if (len <= 2) return new Set<number>();
  if (len === 3) {
    // Keep 2 numbers: prefer current + next when in middle; otherwise current + neighbor
    if (currentIdx === 1) return new Set<number>([0]); // hide first, keep [current, next]
    if (currentIdx === 0) return new Set<number>([2]); // hide last, keep [current, next]
    return new Set<number>([0]); // currentIdx === 2 -> hide first, keep [prev, current]
  }
  if (len === 4) {
    // Keep 2 numbers based on where current is
    if (currentIdx <= 1) return new Set<number>([2, 3]); // near start: keep [0,1]
    return new Set<number>([0, 1]); // near end: keep [2,3]
  }
  // Fallback: hide edges to keep 2 centered
  return new Set<number>([0, len - 1]);
})();
---

<nav aria-label="Pagination" class={styles.pagination}>
  <!-- Previous page -->
  <a
    href={pageHref(clamp(page - 1, 1, totalPages))}
    aria-label="Previous page"
    aria-disabled={page === 1 ? 'true' : undefined}
    tabindex={page === 1 ? -1 : undefined}
    class:list={[styles["page-link"], styles.icon, page === 1 && styles.disabled]}
  >
    <Icon name="arrowleft" class={styles.iconSvg} />
  </a>

  <!-- Leading edge: first page + optional ellipsis -->
  {windowPages[0] > 1 && (
    <a href={pageHref(1)} class={styles["page-link"]}>1</a>
  )}
  {showLeadingEllipsis && (
    <span class={styles.ellipsis} aria-hidden="true">…</span>
  )}

  <!-- Center window -->
  {windowPages.map((n, idx) => {
    const active = n === page;
    return (
      <a
        href={pageHref(n)}
        aria-current={active ? 'page' : undefined}
        class:list={[
          styles["page-link"],
          active && styles.active,
          mobileHideIdx.has(idx) && styles.mobileHide,
        ]}
      >
        {n}
      </a>
    );
  })}

  <!-- Trailing edge: ellipsis + last -->
  {showTrailingEllipsis && (
    <span class={styles.ellipsis} aria-hidden="true">…</span>
  )}
  {windowPages[windowPages.length - 1] < totalPages && (
    <a href={pageHref(totalPages)} class={styles["page-link"]}>{totalPages}</a>
  )}

  <!-- Next page -->
  <a
    href={pageHref(clamp(page + 1, 1, totalPages))}
    aria-label="Next page"
    aria-disabled={page === totalPages ? 'true' : undefined}
    tabindex={page === totalPages ? -1 : undefined}
    class:list={[styles["page-link"], styles.icon, page === totalPages && styles.disabled]}
  >
    <Icon name="arrowright" class={styles.iconSvg} />
  </a>
</nav>
