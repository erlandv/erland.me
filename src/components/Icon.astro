---
interface Props {
  name: string;
  class?: string;
  ariaLabel?: string;
}

const { name, class: className, ariaLabel }: Props = Astro.props as Props;

// Lazy load icons using dynamic imports
const iconMap = {
  home: () => import("../icons/home.svg?raw"),
  code: () => import("../icons/code.svg?raw"),
  dns: () => import("../icons/dns.svg?raw"),
  favorite: () => import("../icons/favorite.svg?raw"),
  blog: () => import("../icons/blog.svg?raw"),
  menu: () => import("../icons/menu.svg?raw"),
  close: () => import("../icons/close.svg?raw"),
  back: () => import("../icons/back.svg?raw"),
  browser: () => import("../icons/browser.svg?raw"),
  database: () => import("../icons/database.svg?raw"),
  mail: () => import("../icons/mail.svg?raw"),
  download: () => import("../icons/download.svg?raw"),
  x: () => import("../icons/x.svg?raw"),
  instagram: () => import("../icons/instagram.svg?raw"),
  facebook: () => import("../icons/facebook.svg?raw"),
  github: () => import("../icons/github.svg?raw"),
  bluesky: () => import("../icons/bluesky.svg?raw"),
  linkedin: () => import("../icons/linkedin.svg?raw"),
  whatsapp: () => import("../icons/whatsapp.svg?raw"),
  telegram: () => import("../icons/telegram.svg?raw"),
  date: () => import("../icons/date.svg?raw"),
  tags: () => import("../icons/tags.svg?raw"),
  readmore: () => import("../icons/readmore.svg?raw"),
  personal: () => import("../icons/personal.svg?raw"),
  copy: () => import("../icons/copy.svg?raw"),
  share: () => import("../icons/share.svg?raw"),
  sidebar: () => import("../icons/sidebar.svg?raw"),
  collapse: () => import("../icons/collapse.svg?raw"),
  expand: () => import("../icons/expand.svg?raw"),
  fullscreen: () => import("../icons/fullscreen.svg?raw"),
  arrowup: () => import("../icons/arrowup.svg?raw"),
  search: () => import("../icons/search.svg?raw"),
};

// Get the icon loader function
const iconLoader = iconMap[name as keyof typeof iconMap];
if (!iconLoader) {
  throw new Error(`Icon not found: ${name}`);
}

// Load the icon dynamically
const iconModule = await iconLoader();
const raw = iconModule.default;

function normalizeSvg(svg: string): string {
  let s = svg
    // remove XML declarations and comments
    .replace(/<\?xml[\s\S]*?\?>/g, "")
    .replace(/<!--([\s\S]*?)-->/g, "")
    // remove style blocks (e.g., .st0 { fill:#FFFFFF })
    .replace(/<style[\s\S]*?<\/style>/g, "")
    // normalize inline fill/stroke declarations to currentColor (skip none/url/currentColor)
    .replace(
      /fill\s*:\s*(?!none\b)(?!currentColor\b)(?!url\()[^;"']+/gi,
      "fill:currentColor"
    )
    .replace(
      /stroke\s*:\s*(?!none\b)(?!currentColor\b)(?!url\()[^;"']+/gi,
      "stroke:currentColor"
    )
    .replace(
      /fill\s*=\s*"(?!none\b)(?!currentColor\b)(?!url\()[^"]*"/gi,
      'fill="currentColor"'
    )
    .replace(
      /stroke\s*=\s*"(?!none\b)(?!currentColor\b)(?!url\()[^"]*"/gi,
      'stroke="currentColor"'
    );

  // inject class + accessibility + default color attributes on root <svg>
  s = s.replace(
    /<svg(\s[^>]*)?>/i,
    (match) => {
      let tag = match;
      // strip width/height from root svg so CSS controls sizing
      tag = tag.replace(/\s(width|height)\s*=\s*"[^"]*"/gi, "");
      // drop any existing root fill attribute before injecting our default
      tag = tag.replace(/\sfill\s*=\s*"[^"]*"/i, "");
      // ensure class
      if (className) {
        if (/class\s*=\s*"[^"]*"/i.test(tag)) {
          tag = tag.replace(
            /class\s*=\s*"([^"]*)"/i,
            (_m, cls) => `class="${cls} ${className}"`
          );
        } else {
          tag = tag.replace(/<svg/i, `<svg class="${className}"`);
        }
      }
      // ensure aria-hidden or aria-label
      if (ariaLabel && ariaLabel.trim().length > 0) {
        if (/aria-label\s*=\s*"[^"]*"/i.test(tag)) {
          tag = tag.replace(/aria-label\s*=\s*"([^"]*)"/i, `aria-label="${ariaLabel}"`);
        } else {
          tag = tag.replace(/<svg/i, `<svg aria-label="${ariaLabel}"`);
        }
        // role img for labeled icon
        if (!/role\s*=\s*"img"/i.test(tag)) {
          tag = tag.replace(/<svg/i, `<svg role="img"`);
        }
      } else {
        // decorative
        if (!/aria-hidden\s*=\s*"true"/i.test(tag)) {
          tag = tag.replace(/<svg/i, `<svg aria-hidden="true"`);
        }
      }
      // default color behavior
      if (!/fill\s*=\s*"currentColor"/i.test(tag)) {
        tag = tag.replace(/<svg/i, `<svg fill="currentColor"`);
      }
      return tag;
    }
  );

  return s;
}

const svg = normalizeSvg(raw);
---
<Fragment set:html={svg} />
