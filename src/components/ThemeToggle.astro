---
import Icon from './Icon.astro';
import styles from './ThemeToggle/ThemeToggle.module.css';
---

<div class:list={[styles.wrapper, 'theme-toggle']}>
  <button
    type='button'
    class:list={[styles.button, 'theme-toggle__button']}
    data-theme-toggle
    data-mode='auto'
    role='switch'
    aria-checked='false'
    aria-label='Switch Theme'
    aria-describedby='theme-status'
    title='Switch Theme'
  >
    <span
      class:list={[
        styles.icon,
        styles.iconAuto,
        'theme-toggle__icon',
        'theme-toggle__icon--auto',
      ]}
      data-theme-icon='auto'
      aria-hidden='true'
    >
      <Icon name='auto' class={styles.svg} />
    </span>
    <span
      class:list={[
        styles.icon,
        styles.iconLight,
        'theme-toggle__icon',
        'theme-toggle__icon--light',
      ]}
      data-theme-icon='light'
      aria-hidden='true'
      hidden
    >
      <Icon name='sun' class={styles.svg} />
    </span>
    <span
      class:list={[
        styles.icon,
        styles.iconDark,
        'theme-toggle__icon',
        'theme-toggle__icon--dark',
      ]}
      data-theme-icon='dark'
      aria-hidden='true'
      hidden
    >
      <Icon name='moon' class={styles.svg} />
    </span>
  </button>
  <!-- Live region for screen reader announcements -->
  <div
    id='theme-status'
    class='visually-hidden'
    role='status'
    aria-live='polite'
    aria-atomic='true'
  ></div>
</div>
<script is:inline>
  (() => {
    const stateLabels = {
      auto: 'System Default',
      light: 'Light Mode',
      dark: 'Dark Mode',
    };

    // Store unsubscribe function globally to cleanup on re-init
    let currentUnsubscribe = null;

    const initThemeToggle = () => {
      const button = document.querySelector('[data-theme-toggle]');
      if (!button) return;

      const control = window.__themeControl;
      if (!control) {
        // Retry after a short delay if control not ready yet
        setTimeout(initThemeToggle, 50);
        return;
      }

      // Cleanup previous subscription if exists
      if (currentUnsubscribe) {
        currentUnsubscribe();
        currentUnsubscribe = null;
      }

      // Remove old click listener by cloning FIRST (prevents duplicate listeners)
      const newButton = button.cloneNode(true);
      button.parentNode?.replaceChild(newButton, button);

      // NOW query icon elements from the fresh button in DOM
      /** @type {Record<'auto' | 'light' | 'dark', HTMLElement | null>} */
      const iconMap = {
        auto: newButton.querySelector('[data-theme-icon="auto"]'),
        light: newButton.querySelector('[data-theme-icon="light"]'),
        dark: newButton.querySelector('[data-theme-icon="dark"]'),
      };

      const updateIcons = active => {
        ['auto', 'light', 'dark'].forEach(key => {
          const icon = iconMap[key];
          if (!icon) return;
          icon.hidden = key !== active;
        });
      };

      const update = ({ preference, resolved }, announce = false) => {
        newButton.setAttribute('data-mode', preference);
        newButton.setAttribute('data-resolved', resolved);
        
        const text = stateLabels[preference] || stateLabels.auto;
        const title = `Switch Theme (currently ${text.toLowerCase()})`;
        
        // Update ARIA attributes
        newButton.setAttribute('aria-label', title);
        newButton.setAttribute('aria-checked', String(preference !== 'auto'));
        newButton.setAttribute('title', title);
        
        // Update icons
        updateIcons(preference);
        
        // Announce to screen readers on user action
        if (announce) {
          const statusEl = document.getElementById('theme-status');
          if (statusEl) {
            statusEl.textContent = `Theme changed to ${text}`;
            // Clear after announcement to avoid repetition
            setTimeout(() => {
              statusEl.textContent = '';
            }, 1000);
          }
        }
      };

      // Subscribe and store unsubscribe function
      // This will immediately call update() with current theme state
      currentUnsubscribe = control.subscribe(update);

      // Add fresh click listener
      newButton.addEventListener('click', event => {
        event.preventDefault();
        const nextPref = control.cyclePreference();
        // Manually trigger update with announce flag after user action
        const resolved = control.getResolved();
        update({ preference: nextPref, resolved }, true);
      });
      
      // Add keyboard support for accessibility
      newButton.addEventListener('keydown', event => {
        // Space or Enter key
        if (event.key === ' ' || event.key === 'Enter') {
          event.preventDefault();
          const nextPref = control.cyclePreference();
          const resolved = control.getResolved();
          update({ preference: nextPref, resolved }, true);
        }
      });
    };

    // Initial load
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initThemeToggle);
    } else {
      initThemeToggle();
    }

    // Re-initialize on view transitions
    document.addEventListener('astro:page-load', initThemeToggle);
    document.addEventListener('astro:after-swap', initThemeToggle);
  })();
</script>
