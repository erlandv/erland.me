---
import Icon from './Icon.astro';
import styles from './ThemeToggle/ThemeToggle.module.css';
---

<div class:list={[styles.wrapper, 'theme-toggle']}>
  <button
    type='button'
    class:list={[styles.trigger, 'theme-toggle__trigger']}
    data-theme-trigger
    aria-expanded='false'
    aria-controls='theme-flyout'
    aria-label='Theme settings'
    title='Theme settings'
  >
    <span class:list={[styles.triggerIcon, 'theme-toggle__trigger-icon']}>
      <Icon name='auto' class={styles.svg} data-theme-trigger-icon />
    </span>
  </button>

  <div
    id='theme-flyout'
    class:list={[styles.flyout, 'theme-toggle__flyout']}
    role='menu'
    aria-label='Theme options'
    hidden
  >
    <button
      type='button'
      class:list={[styles.option, 'theme-toggle__option']}
      role='menuitemradio'
      data-theme-option='auto'
      data-active='true'
      aria-checked='true'
    >
      <span class={styles.optionIcon}>
        <Icon name='auto' class={styles.optionSvg} />
      </span>
      <span class={styles.optionLabel}>Auto</span>
    </button>

    <button
      type='button'
      class:list={[styles.option, 'theme-toggle__option']}
      role='menuitemradio'
      data-theme-option='light'
      aria-checked='false'
    >
      <span class={styles.optionIcon}>
        <Icon name='sun' class={styles.optionSvg} />
      </span>
      <span class={styles.optionLabel}>Light</span>
    </button>

    <button
      type='button'
      class:list={[styles.option, 'theme-toggle__option']}
      role='menuitemradio'
      data-theme-option='dark'
      aria-checked='false'
    >
      <span class={styles.optionIcon}>
        <Icon name='moon' class={styles.optionSvg} />
      </span>
      <span class={styles.optionLabel}>Dark</span>
    </button>
  </div>

  <div
    id='theme-status'
    class='visually-hidden'
    role='status'
    aria-live='polite'
    aria-atomic='true'
  ></div>
</div>
<script is:inline>
  (() => {
    const stateLabels = {
      auto: 'Auto',
      light: 'Light',
      dark: 'Dark',
    };

    // Icon mapping for trigger button
    const iconNames = {
      auto: 'auto',
      light: 'sun',
      dark: 'moon',
    };

    // Store unsubscribe function globally to cleanup on re-init
    let currentUnsubscribe = null;
    let isOpen = false;
    let initialized = false;

    const initThemeToggle = () => {
      // Prevent duplicate initialization on same page
      if (initialized) {
        return;
      }
      
      const trigger = document.querySelector('[data-theme-trigger]');
      const flyout = document.getElementById('theme-flyout');
      const options = document.querySelectorAll('[data-theme-option]');
      
      if (!trigger || !flyout || !options.length) {
        setTimeout(initThemeToggle, 100);
        return;
      }

      const control = window.__themeControl;
      if (!control) {
        setTimeout(initThemeToggle, 50);
        return;
      }
      
      initialized = true;

      // Cleanup previous subscription if exists
      if (currentUnsubscribe) {
        currentUnsubscribe();
        currentUnsubscribe = null;
      }

      // Position flyout
      const positionFlyout = () => {
        const rect = trigger.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        const flyoutWidth = 200;
        
        // Mobile: dropdown below trigger, aligned right
        if (viewportWidth <= 1024) {
          flyout.style.top = `${rect.bottom + 8}px`;
          flyout.style.right = '8px';
          flyout.style.left = 'auto';
        } 
        // Desktop: dropdown below trigger at top-right
        else {
          // Position below trigger with gap
          flyout.style.top = `${rect.bottom + 8}px`;
          flyout.style.right = '16px';
          flyout.style.left = 'auto';
        }
      };

      // Open flyout
      const openFlyout = () => {
        isOpen = true;
        trigger.setAttribute('aria-expanded', 'true');
        flyout.hidden = false;
        flyout.removeAttribute('hidden');
        positionFlyout();
        
        // Focus first option
        const firstOption = flyout.querySelector('[data-theme-option]');
        if (firstOption) {
          firstOption.focus();
        }
      };

      // Close flyout
      const closeFlyout = () => {
        isOpen = false;
        trigger.setAttribute('aria-expanded', 'false');
        flyout.hidden = true;
        trigger.focus();
      };

      // Toggle flyout
      const toggleFlyout = () => {
        if (isOpen) {
          closeFlyout();
        } else {
          openFlyout();
        }
      };

      // Update UI based on current theme
      const updateUI = ({ preference, resolved }) => {
        // Update trigger icon - replace entire icon container content
        const triggerIconContainer = trigger.querySelector('.theme-toggle__trigger-icon');
        if (triggerIconContainer) {
          const iconName = iconNames[preference];
          
          // Get the icon SVG from options as template (they have all the icons we need)
          const optionButton = document.querySelector(`[data-theme-option="${preference}"]`);
          if (optionButton) {
            const optionIconSvg = optionButton.querySelector('svg');
            if (optionIconSvg) {
              // Clone the icon SVG
              const newIcon = optionIconSvg.cloneNode(true);
              // Clear and replace icon container content
              triggerIconContainer.innerHTML = '';
              triggerIconContainer.appendChild(newIcon);
            }
          }
          
          // Update aria-label and title
          trigger.setAttribute('aria-label', `Theme: ${stateLabels[preference]}`);
          trigger.setAttribute('title', `Theme: ${stateLabels[preference]}`);
        }

        // Update active state on options
        options.forEach(option => {
          const optionTheme = option.getAttribute('data-theme-option');
          const isActive = optionTheme === preference;
          option.setAttribute('data-active', String(isActive));
          option.setAttribute('aria-checked', String(isActive));
        });
      };

      // Subscribe to theme changes
      currentUnsubscribe = control.subscribe(updateUI);

      // Initial UI update to sync with current theme
      const currentState = {
        preference: control.getPreference(),
        resolved: control.getResolved()
      };
      updateUI(currentState);

      // Trigger click handler
      trigger.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        toggleFlyout();
      });

      // Option click handlers
      options.forEach(option => {
        option.addEventListener('click', (event) => {
          event.preventDefault();
          const theme = option.getAttribute('data-theme-option');
          
          if (theme && (theme === 'auto' || theme === 'light' || theme === 'dark')) {
            control.setPreference(theme);
            
            // Announce to screen readers
            const statusEl = document.getElementById('theme-status');
            if (statusEl) {
              statusEl.textContent = `Theme changed to ${stateLabels[theme]}`;
              setTimeout(() => {
                statusEl.textContent = '';
              }, 1000);
            }
            
            closeFlyout();
          }
        });
      });

      // Click outside to close
      const handleClickOutside = (event) => {
        if (isOpen && !trigger.contains(event.target) && !flyout.contains(event.target)) {
          closeFlyout();
        }
      };

      document.addEventListener('click', handleClickOutside);

      // ESC key to close
      const handleEscape = (event) => {
        if (isOpen && event.key === 'Escape') {
          event.preventDefault();
          closeFlyout();
        }
      };

      document.addEventListener('keydown', handleEscape);

      // Reposition on resize
      let resizeTimeout;
      const handleResize = () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
          if (isOpen) {
            positionFlyout();
          }
        }, 100);
      };

      window.addEventListener('resize', handleResize);

      // Cleanup on navigation
      const cleanup = () => {
        document.removeEventListener('click', handleClickOutside);
        document.removeEventListener('keydown', handleEscape);
        window.removeEventListener('resize', handleResize);
        if (currentUnsubscribe) {
          currentUnsubscribe();
          currentUnsubscribe = null;
        }
        initialized = false; // Reset for next page
        isOpen = false;
      };

      // Store cleanup for view transitions
      document.addEventListener('astro:before-swap', cleanup, { once: true });
    };

    // Initial load
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initThemeToggle);
    } else {
      initThemeToggle();
    }

    // Re-initialize on view transitions
    document.addEventListener('astro:page-load', initThemeToggle);
    document.addEventListener('astro:after-swap', initThemeToggle);
  })();
</script>
