---
import { ClientRouter } from 'astro:transitions';
import { generateMetaTags, websiteJsonLd } from '../lib/seo';
import '../styles/styles.css';

interface HeaderProps {
  title: string;
  canonical?: string;
  prevHref?: string;
  nextHref?: string;
  jsonLd?: any;
  description?: string;
  image?: string;
  type?: 'website' | 'article' | 'profile';
  publishedTime?: Date | string;
  modifiedTime?: Date | string;
  tags?: string[];
  author?: string;
}
const { 
  title, 
  canonical, 
  prevHref, 
  nextHref, 
  jsonLd, 
  description,
  image,
  type = 'website',
  publishedTime,
  modifiedTime,
  tags,
  author
} = Astro.props as HeaderProps;

// Generate comprehensive meta tags
const metaTags = generateMetaTags({
  title,
  description,
  canonical,
  image,
  type,
  publishedTime,
  modifiedTime,
  tags,
  author
});

// Add website schema to all pages
const websiteSchema = websiteJsonLd();
---

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>{metaTags.title}</title>
  <ClientRouter fallback="swap" />
  
  <meta name="description" content={metaTags.description} />
  <meta name="author" content="Erland" />
  <meta name="robots" content="index, follow" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#1a1a1a" />
  <meta name="msapplication-TileColor" content="#1a1a1a" />
  
  <meta property="og:title" content={metaTags.openGraph.title} />
  <meta property="og:description" content={metaTags.openGraph.description} />
  <meta property="og:url" content={metaTags.openGraph.url} />
  <meta property="og:type" content={metaTags.openGraph.type} />
  <meta property="og:image" content={metaTags.openGraph.image} />
  <meta property="og:site_name" content={metaTags.openGraph.siteName} />
  <meta property="og:locale" content={metaTags.openGraph.locale} />
  {metaTags.openGraph.publishedTime && <meta property="article:published_time" content={metaTags.openGraph.publishedTime} />}
  {metaTags.openGraph.modifiedTime && <meta property="article:modified_time" content={metaTags.openGraph.modifiedTime} />}
  {metaTags.openGraph.tags && metaTags.openGraph.tags.map(tag => <meta property="article:tag" content={tag} />)}
  {metaTags.openGraph.authors && metaTags.openGraph.authors.map(author => <meta property="article:author" content={author} />)}
  
  <meta name="twitter:card" content={metaTags.twitter.card} />
  <meta name="twitter:title" content={metaTags.twitter.title} />
  <meta name="twitter:description" content={metaTags.twitter.description} />
  <meta name="twitter:image" content={metaTags.twitter.image} />
  <meta name="twitter:creator" content={metaTags.twitter.creator} />
  <meta name="twitter:site" content={metaTags.twitter.site} />
  
  <link href="https://fonts.googleapis.com/css2?family=Albert+Sans:ital,wght@0,300..900;1,300..900&display=swap" rel="stylesheet" />
  
  <link rel="canonical" href={metaTags.canonical} />
  {prevHref && <link rel="prev" href={prevHref} />}
  {nextHref && <link rel="next" href={nextHref} />}
  
  <link href="/assets/erland-icon.svg" rel="shortcut icon" type="image/x-icon" />
  <link href="/assets/erland-icon.svg" rel="apple-touch-icon" />
  <link href="/assets/erland-icon.svg" rel="icon" type="image/svg+xml" />
  
  <script type="application/ld+json" is:inline set:html={JSON.stringify(websiteSchema)} />
  {jsonLd && (
    <script type="application/ld+json" is:inline set:html={JSON.stringify(jsonLd)} />
  )}
  
  <script type="text/javascript" is:inline>
    !(function (o, c) {
      var n = c.documentElement,
        t = " w-mod-";
      (n.className += t + "js"), ("ontouchstart" in o || (o.DocumentTouch && c instanceof DocumentTouch)) && (n.className += t + "touch");
    })(window, document);
  </script>
  
  <!-- Persistent sidebar state controller: applies before paint and re-initializes after client navigations -->
  <script is:inline>
    (function() {
      var STORAGE_KEY = 'sidebar-collapsed';

      function getState() {
        try { return (typeof localStorage !== 'undefined') && localStorage.getItem(STORAGE_KEY) === 'true'; } catch (e) { return false; }
      }
      function saveState(isCollapsed) {
        try { if (typeof localStorage !== 'undefined') localStorage.setItem(STORAGE_KEY, isCollapsed ? 'true' : 'false'); } catch (e) {}
      }
      function applyStateImmediate(isCollapsed) {
        var sidebar = document.querySelector('.sidebar');
        if (isCollapsed) {
          document.documentElement.classList.add('sidebar-collapsed-global');
          document.documentElement.setAttribute('data-sidebar', 'collapsed');
          if (sidebar) {
            document.body.classList.add('sidebar-collapsed');
            sidebar.classList.add('sidebar-collapsed');
            sidebar.classList.remove('sidebar-animating', 'hiding-text');
          }
        } else {
          document.documentElement.classList.remove('sidebar-collapsed-global');
          document.documentElement.setAttribute('data-sidebar', 'expanded');
          if (sidebar) {
            document.body.classList.remove('sidebar-collapsed');
            sidebar.classList.remove('sidebar-collapsed', 'sidebar-animating', 'hiding-text');
          }
        }
      }

      function initSidebar() {
        try {
          var sidebar = document.querySelector('.sidebar');
          var toggle = document.getElementById('sidebar-toggle');
          if (!sidebar || !toggle) return;
          var collapsed = getState();
          // Sync UI immediately
          toggle.checked = collapsed;
          applyStateImmediate(collapsed);
          // Bind change handler once per current toggle element
          if (toggle.dataset.bound !== 'true') {
            toggle.addEventListener('change', function() {
              var newState = this.checked;
              applyStateImmediate(newState);
              saveState(newState);
            });
            toggle.dataset.bound = 'true';
          }
        } catch (e) {}
      }

      // Apply root flags ASAP (before paint)
      try {
        var initialCollapsed = getState();
        document.documentElement.classList.toggle('sidebar-collapsed-global', initialCollapsed);
        document.documentElement.setAttribute('data-sidebar', initialCollapsed ? 'collapsed' : 'expanded');
      } catch (e) {}

      // Initialize on first load
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initSidebar);
      } else { initSidebar(); }
      // Re-initialize after client-side navigations (support multiple event targets/names)
      var reinit = function() { initSidebar(); };
      window.addEventListener('astro:page-load', reinit);
      document.addEventListener('astro:page-load', reinit);
      window.addEventListener('astro:after-swap', reinit);
      document.addEventListener('astro:after-swap', reinit);
      // Fallback: observe DOM mutations to re-bind if the sidebar/toggle gets replaced
      try {
        var mo = new MutationObserver(function() {
          var toggle = document.getElementById('sidebar-toggle');
          // Bind if present and not yet bound
          if (toggle && toggle.dataset.bound !== 'true') initSidebar();
        });
        mo.observe(document.body, { childList: true, subtree: true });
      } catch (e) {}
    })();
  </script>
</head>
