---
import { generateMetaTags, websiteJsonLd, isProductionSite } from '@lib/seo';
import { GTM_ID, ADSENSE_CLIENT } from '@lib/env';
import { ClientRouter } from 'astro:transitions';

interface HeaderProps {
  title: string;
  canonical?: string;
  prevHref?: string;
  nextHref?: string;
  jsonLd?: any;
  description?: string;
  image?: string;
  type?: 'website' | 'article' | 'profile';
  publishedTime?: Date | string;
  modifiedTime?: Date | string;
  tags?: string[];
  author?: string;
  preloadSearch?: boolean;
}
const {
  title,
  canonical,
  prevHref,
  nextHref,
  jsonLd,
  description,
  image,
  type = 'website',
  publishedTime,
  modifiedTime,
  tags,
  author,
  preloadSearch = false,
} = Astro.props as HeaderProps;

// Generate comprehensive meta tags
const metaTags = generateMetaTags({
  title,
  description,
  canonical,
  image,
  type,
  publishedTime,
  modifiedTime,
  tags,
  author
});

// Add website schema to all pages
const websiteSchema = websiteJsonLd();

const enableGTM = import.meta.env.PROD && isProductionSite() && Boolean(GTM_ID);
const enableAdsense = import.meta.env.PROD && isProductionSite() && Boolean(ADSENSE_CLIENT);

// Precompute GTM inline snippet to ensure server-side interpolation of the ID
const gtmSnippet = `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','${GTM_ID}');`;
---

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>{metaTags.title}</title>
  <meta name="generator" content={Astro.generator} />
  <meta name="theme-color" content="#1a1a1a" />
  <meta name="msapplication-TileColor" content="#1a1a1a" />
  <meta name="mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-title" content={metaTags.title} />
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
  
  <meta name="description" content={metaTags.description} />
  <meta name="author" content="Erland" />
  <meta name="robots" content={isProductionSite() ? 'index, follow, max-snippet:-1, max-image-preview:large' : 'noindex, nofollow'} />
  
  <meta property="og:title" content={metaTags.openGraph.title} />
  <meta property="og:description" content={metaTags.openGraph.description} />
  <meta property="og:url" content={metaTags.openGraph.url} />
  <meta property="og:type" content={metaTags.openGraph.type} />
  <meta property="og:image" content={metaTags.openGraph.image} />
  {metaTags.openGraph.imageAlt && (
    <meta property="og:image:alt" content={metaTags.openGraph.imageAlt} />
  )}
  <meta property="og:site_name" content={metaTags.openGraph.siteName} />
  <meta property="og:locale" content={metaTags.openGraph.locale} />
  {metaTags.openGraph.publishedTime && <meta property="article:published_time" content={metaTags.openGraph.publishedTime} />}
  {metaTags.openGraph.modifiedTime && <meta property="article:modified_time" content={metaTags.openGraph.modifiedTime} />}
  {metaTags.openGraph.tags && metaTags.openGraph.tags.map(tag => <meta property="article:tag" content={tag} />)}
  {metaTags.openGraph.authors && metaTags.openGraph.authors.map(author => <meta property="article:author" content={author} />)}
  
  <meta name="twitter:card" content={metaTags.twitter.card} />
  <meta name="twitter:title" content={metaTags.twitter.title} />
  <meta name="twitter:description" content={metaTags.twitter.description} />
  <meta name="twitter:image" content={metaTags.twitter.image} />
  {metaTags.twitter.imageAlt && (
    <meta name="twitter:image:alt" content={metaTags.twitter.imageAlt} />
  )}
  <meta name="twitter:creator" content={metaTags.twitter.creator} />
  <meta name="twitter:site" content={metaTags.twitter.site} />
  
  <link rel="preconnect" href="https://asset.erland.me" crossorigin />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  {enableGTM && (
    <>
      <link rel="preconnect" href="https://www.googletagmanager.com">
      <link rel="dns-prefetch" href="https://www.googletagmanager.com">
    </>
  )}
  {enableAdsense && (
    <>
      <link rel="preconnect" href="https://pagead2.googlesyndication.com">
      <link rel="preconnect" href="https://adservice.google.com">
      <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
      <link rel="dns-prefetch" href="https://adservice.google.com">
    </>
  )}
  
  <link rel="preload" href="/fonts/agave-nerd/AgaveNerdFontMono-Regular.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="/fonts/agave-nerd/AgaveNerdFontMono-Bold.woff2" as="font" type="font/woff2" crossorigin>
  
  <link href="https://fonts.googleapis.com/css2?family=Albert+Sans:ital,wght@0,300..900;1,300..900&display=swap" rel="stylesheet" />
  
  {preloadSearch && (<link rel="preload" as="fetch" href="/search-index.json" type="application/json" crossorigin />)}
  <link rel="canonical" href={metaTags.canonical} />
  {prevHref && <link rel="prev" href={prevHref} />}
  {nextHref && <link rel="next" href={nextHref} />}
  
  <link rel="apple-touch-icon" href="/assets/favicon/apple-touch-icon.png" />
  <link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon/favicon-16x16.png" />
  <link rel="shortcut icon" href="/assets/favicon/favicon.ico" />
  <link rel="manifest" href="/assets/favicon/site.webmanifest" />
  
  <script type="application/ld+json" is:inline set:html={JSON.stringify(websiteSchema)} />
  {jsonLd && (
    <script type="application/ld+json" is:inline set:html={JSON.stringify(jsonLd)} />
  )}
  {enableGTM && (
    <script is:inline set:html={gtmSnippet} />
  )}
  {enableAdsense && (
    <Fragment set:html={`<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${ADSENSE_CLIENT}" crossorigin="anonymous"></script>`} />
  )}
  
  <ClientRouter fallback="swap" />
  <script is:inline>
    (function () {
      const storageKey = 'theme-preference';
      const media = window.matchMedia
        ? window.matchMedia('(prefers-color-scheme: dark)')
        : null;

      const existing = window.__themeControl;
      if (existing) {
        const current = existing.getPreference();
        if (typeof existing.setPreference === 'function') {
          existing.setPreference(current);
        }
        if (typeof existing.syncDocument === 'function') {
          existing.syncDocument(document);
        }
        return;
      }

      const subscribers = new Set();

      const readStoredPreference = () => {
        try {
          const value = localStorage.getItem(storageKey);
          return value === 'light' || value === 'dark' || value === 'auto'
            ? value
            : 'auto';
        } catch {
          return 'auto';
        }
      };

      const writeStoredPreference = (value) => {
        try {
          localStorage.setItem(storageKey, value);
        } catch {
          /* noop */
        }
      };

      let preference = readStoredPreference();

      const resolveRoot = (target) => {
        if (!target) return null;
        const nodeType = target.nodeType;
        if (nodeType === 1) return target;
        if (nodeType === 9 && target.documentElement) {
          return target.documentElement;
        }
        if (target.documentElement) {
          return target.documentElement;
        }
        return null;
      };

      const resolvePreference = (pref) => {
        if (pref === 'auto') {
          if (!media) return 'dark';
          return media.matches ? 'dark' : 'light';
        }
        return pref;
      };

      const syncDocument = (targetDoc = document) => {
        const resolved = resolvePreference(preference);
        const root = resolveRoot(targetDoc);
        if (root) {
          if (resolved === 'light') {
            root.setAttribute('data-theme', 'light');
          } else {
            root.removeAttribute('data-theme');
          }
          root.setAttribute('data-theme-preference', preference);
          root.setAttribute('data-theme-resolved', resolved);
        }
        return resolved;
      };

      const notifySubscribers = (resolved) => {
        subscribers.forEach((callback) => {
          try {
            callback({ preference, resolved });
          } catch (error) {
            console.error('Theme subscriber error', error);
          }
        });
      };

      const applyPreference = (pref, persist) => {
        preference = pref;
        const resolved = syncDocument(document);

        if (persist) {
          writeStoredPreference(pref);
        }

        notifySubscribers(resolved);
      };

      const setPreference = (nextPref) => {
        applyPreference(nextPref, true);
      };

      applyPreference(preference, false);

      if (media) {
        const handleChange = () => {
          if (preference === 'auto') {
            applyPreference(preference, false);
          }
        };
        if (typeof media.addEventListener === 'function') {
          media.addEventListener('change', handleChange);
        } else if (typeof media.addListener === 'function') {
          media.addListener(handleChange);
        }
      }

      const syncIncomingDocument = (event) => {
        const newDoc = event?.detail?.newDocument;
        if (newDoc) {
          syncDocument(newDoc);
        }
      };

      const reapplyCurrent = () => {
        syncDocument(document);
      };

      document.addEventListener('astro:before-swap', syncIncomingDocument);
      document.addEventListener('astro:after-swap', reapplyCurrent);
      document.addEventListener('astro:page-load', reapplyCurrent);

      const api = {
        getPreference: () => preference,
        getResolved: () => resolvePreference(preference),
        setPreference,
        cyclePreference: () => {
          const order = ['auto', 'light', 'dark'];
          const index = order.indexOf(preference);
          const next = order[(index + 1) % order.length];
          setPreference(next);
          return next;
        },
        subscribe: (callback) => {
          if (typeof callback !== 'function') {
            return () => {};
          }
          subscribers.add(callback);
          callback({
            preference,
            resolved: resolvePreference(preference),
          });
          return () => {
            subscribers.delete(callback);
          };
        },
        syncDocument,
      };

      if (!window.__themeControl) {
        Object.defineProperty(window, '__themeControl', {
          value: api,
          writable: false,
          configurable: false,
        });
      }
    })();
  </script>

</head>
