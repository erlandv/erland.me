---
import SiteLayout from '../../layouts/SiteLayout.astro';
import BackNav from '../../components/BackNav.astro';
import { getCollection, getEntryBySlug } from 'astro:content';
import { creativeWorkJsonLd } from '../../lib/seo';
import ShareButtons from '../../components/ShareButtons.astro';
import dl from '../../styles/pages/download.module.css';
import '../../styles/components/hero.css';
import ScrollTopButton from '../../components/ScrollTopButton.astro';
import ContentImage from '../../components/ContentImage.astro';
import HeroImage from '../../components/HeroImage.astro';
import { getOgImageUrl, resolveHero } from '../../lib/images';
import { SITE_URL } from '../../lib/env';

export async function getStaticPaths() {
  const downloads = await getCollection('downloads');
  return downloads
    .filter((item: any) => !item.data.draft)
    .map((item: any) => ({ params: { slug: item.slug } }));
}

const { slug } = Astro.params;
const entry = await getEntryBySlug('downloads', slug ?? '');

if (!entry || entry.data.draft) {
  return Astro.redirect('/download/');
}

const { Content } = await entry.render();
const data = entry.data;

const hero = resolveHero(data.hero);
const heroAlt = data.heroAlt ?? data.title;
const optimizedHero = hero
  ? await getOgImageUrl(hero, 1200, 'avif')
  : undefined;
const canonicalPath = `/download/${entry.slug}/`;
const canonicalUrl = `${SITE_URL}${canonicalPath}`;

const jsonLd = creativeWorkJsonLd({
  title: data.title,
  description: data.description ?? data.excerpt,
  publishDate: data.publishDate,
  lastUpdated: data.updatedDate,
  url: canonicalPath,
  image: optimizedHero ?? undefined,
});
---

<SiteLayout
  title={data.title}
  description={data.description || data.excerpt}
  canonical={canonicalPath}
  jsonLd={jsonLd}
  selectedItem='download'
  image={optimizedHero}
  author="Erland Ramdhani"
  type="article"
  publishedTime={data.publishDate}
  modifiedTime={data.updatedDate ?? data.publishDate}
>
  <BackNav href='/download/' label='Back' />
  <article class:list={['content-container', dl['download-page']]}>
    <header class={dl['download-header']}>
      {
        hero ? (
          <HeroImage image={hero} alt={heroAlt} loading='eager' />
        ) : (
          <div class='hero-image hero-placeholder' aria-hidden='true'>
            ðŸ“¦
          </div>
        )
      }
      <h1>{data.title}</h1>
    </header>

    <div class='prose' id='download-content'>
      <Content components={{ img: ContentImage }} />
    </div>

    <ShareButtons
      title={data.title}
      url={canonicalUrl}
      description={data.description ?? data.excerpt}
      heading='Share this template:'
    />
  </article>
  <ScrollTopButton />
</SiteLayout>

<script>
  import {
    autoInitDownloadAds,
    autoInitDownloadPlaceholders,
    shouldRenderAds,
  } from '../../lib/adsense';

  const runAds = () => {
    try {
      const client = import.meta.env.PUBLIC_ADSENSE_CLIENT || '';
      const slotMid = import.meta.env.PUBLIC_ADSENSE_SLOT_DL_MID || '';
      const slotEnd = import.meta.env.PUBLIC_ADSENSE_SLOT_DL_END || '';
      if (
        shouldRenderAds({
          client,
          slots: [slotMid, slotEnd],
        })
      ) {
        autoInitDownloadAds(client, slotMid, slotEnd);
      } else {
        autoInitDownloadPlaceholders();
      }
    } catch {}
  };

  runAds();
  document.addEventListener('astro:page-load', runAds);
  document.addEventListener('astro:after-swap', runAds);
</script>
