---
import SiteLayout from "../../layouts/SiteLayout.astro";
import BackNav from "../../components/BackNav.astro";
import { getCollection, getEntryBySlug } from "astro:content";
import { creativeWorkJsonLd } from "../../lib/seo";
import ShareButtons from "../../components/ShareButtons.astro";
import dl from "../../styles/pages/download.module.css";
import "../../styles/components/hero.css";
import ScrollTopButton from "../../components/ScrollTopButton.astro";
import ContentImage from "../../components/ContentImage.astro";
import HeroImage from "../../components/HeroImage.astro";
import { getOgImageUrl } from "../../lib/images";

export async function getStaticPaths() {
  const downloads = await getCollection("downloads");
  return downloads
    .filter((item: any) => !item.data.draft)
    .map((item: any) => ({ params: { slug: item.slug } }));
}

const { slug } = Astro.params;
const entry = await getEntryBySlug("downloads", slug ?? "");

if (!entry || entry.data.draft) {
  return Astro.redirect("/download/");
}

const { Content } = await entry.render();
const data = entry.data;

const hero = data.hero;
const heroAlt = data.heroAlt ?? data.title;
const optimizedHero = hero ? await getOgImageUrl(hero, 1200, 'avif') : undefined;
const canonicalPath = `/download/${entry.slug}/`;
import { SITE_URL } from '../../lib/env';
const canonicalUrl = `${SITE_URL}${canonicalPath}`;
const lastUpdated = data.lastUpdated
  ? new Date(data.lastUpdated)
  : undefined;

const jsonLd = creativeWorkJsonLd({
  title: data.title,
  description: data.description,
  lastUpdated,
  version: data.version,
  tags: data.tags,
  downloadUrl: data.file,
  url: canonicalPath,
  image: optimizedHero ?? undefined,
});

const downloadRows = (data.downloadFiles && data.downloadFiles.length > 0
  ? data.downloadFiles
  : data.file
    ? [{ label: data.file.split("/").pop() ?? data.title, href: data.file }]
    : []
).map((item: any) => ({
  label: item.label,
  href: item.href,
  size: item.size,
}));

const hasSizeColumn = downloadRows.some((item: any) => Boolean(item.size));
---

<SiteLayout title={data.title} canonical={canonicalPath} jsonLd={jsonLd} selectedItem="download" image={optimizedHero}>
  <BackNav href="/download/" label="Back" />
  <div class:list={["content-container", dl["download-page"]]}>
    <header class={dl["download-header"]}>
      <div class={dl["download-hero"]}>
        {hero ? (
          <HeroImage image={hero} alt={heroAlt} loading="lazy" />
        ) : (
          <div class="hero-image hero-placeholder" aria-hidden="true">ðŸ“¦</div>
        )}
      </div>
      <h1>{data.title}</h1>
    </header>

  <article class={dl["download-richtext"]} id="download-content">
    <Content components={{ img: ContentImage }} />
  </article>

    {downloadRows.length > 0 && (
      <section class={dl["download-files"]} id="download-files-section">
        <h2 class={dl["download-files-title"]}>Link Download</h2>
        {data.downloadIntro && data.downloadIntro.length > 0 && (
          <div class={dl["download-files-intro"]}>
            {data.downloadIntro.map((paragraph: string) => (
              <p>{paragraph}</p>
            ))}
          </div>
        )}
        <table class={dl["download-files-table"]}>
          <thead>
            <tr>
              <th scope="col">File Name</th>
              {hasSizeColumn && <th scope="col">Size</th>}
              <th scope="col">Download</th>
            </tr>
          </thead>
          <tbody>
            {downloadRows.map((item: any) => (
              <tr>
                <td data-label="File Name">{item.label}</td>
                {hasSizeColumn && <td data-label="Size">{item.size ?? "-"}</td>}
                <td data-label="Download">
                  <a class={dl["download-files-link"]} href={item.href} rel="noopener" target="_blank" download>
                    Download
                  </a>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {data.downloadNote && (
          <p class={dl["download-files-note"]}>{data.downloadNote}</p>
        )}
      </section>
    )}
    <ShareButtons
      title={data.title}
      url={canonicalUrl}
      description={data.description}
      heading="Share this template:"
    />
  </div>
  <ScrollTopButton />
  
</SiteLayout>

<script>
  import { autoInitDownloadAds, autoInitDownloadPlaceholders } from "../../lib/adsense";
  try {
    if (import.meta.env.PROD) {
      const client = import.meta.env.PUBLIC_ADSENSE_CLIENT || '';
      const slotMid = import.meta.env.PUBLIC_ADSENSE_SLOT_DL_MID || '';
      const slotEnd = import.meta.env.PUBLIC_ADSENSE_SLOT_DL_END || '';
      autoInitDownloadAds(client, slotMid, slotEnd);
    } else {
      autoInitDownloadPlaceholders();
    }
  } catch {}
  document.addEventListener('astro:page-load', () => {
    try {
      if (import.meta.env.PROD) {
        const client = import.meta.env.PUBLIC_ADSENSE_CLIENT || '';
        const slotMid = import.meta.env.PUBLIC_ADSENSE_SLOT_DL_MID || '';
        const slotEnd = import.meta.env.PUBLIC_ADSENSE_SLOT_DL_END || '';
        autoInitDownloadAds(client, slotMid, slotEnd);
      } else {
        autoInitDownloadPlaceholders();
      }
    } catch {}
  });
  document.addEventListener('astro:after-swap', () => {
    try {
      if (import.meta.env.PROD) {
        const client = import.meta.env.PUBLIC_ADSENSE_CLIENT || '';
        const slotMid = import.meta.env.PUBLIC_ADSENSE_SLOT_DL_MID || '';
        const slotEnd = import.meta.env.PUBLIC_ADSENSE_SLOT_DL_END || '';
        autoInitDownloadAds(client, slotMid, slotEnd);
      } else {
        autoInitDownloadPlaceholders();
      }
    } catch {}
  });
</script>
