---
import SiteLayout from "../../layouts/SiteLayout.astro";
import BackNav from "../../components/BackNav.astro";
import { getCollection, getEntryBySlug } from "astro:content";
import { creativeWorkJsonLd } from "../../lib/seo";
import ShareButtons from "../../components/ShareButtons.astro";

export async function getStaticPaths() {
  const downloads = await getCollection("downloads");
  return downloads
    .filter((item: any) => !item.data.draft)
    .map((item: any) => ({ params: { slug: item.slug } }));
}

const { slug } = Astro.params;
const entry = await getEntryBySlug("downloads", slug ?? "");

if (!entry || entry.data.draft) {
  return Astro.redirect("/download/");
}

const { Content } = await entry.render();
const data = entry.data;

const hero = data.hero;
const heroAlt = data.heroAlt ?? data.title;
const canonicalPath = `/download/${entry.slug}/`;
const canonicalUrl = `${import.meta.env.SITE_URL || 'https://erland.me'}${canonicalPath}`;
const lastUpdated = data.lastUpdated
  ? new Date(data.lastUpdated)
  : undefined;

const jsonLd = creativeWorkJsonLd({
  title: data.title,
  description: data.description,
  lastUpdated,
  version: data.version,
  tags: data.tags,
  downloadUrl: data.file,
  url: canonicalUrl,
  image: hero ? new URL(hero.src, canonicalUrl).toString() : undefined,
});

const downloadRows = (data.downloadFiles && data.downloadFiles.length > 0
  ? data.downloadFiles
  : data.file
    ? [{ label: data.file.split("/").pop() ?? data.title, href: data.file }]
    : []
).map((item: any) => ({
  label: item.label,
  href: item.href,
  size: item.size,
}));

const hasSizeColumn = downloadRows.some((item: any) => Boolean(item.size));
---

<SiteLayout title={`${data.title} | Erland Ramdhani`} canonical={canonicalUrl} jsonLd={jsonLd} selectedItem="download">
  <BackNav href="/download/" label="Back" />
  <div class="content-container download-page">
    <header class="download-header">
      <div class="download-hero">
        {hero ? (
          <img
            src={hero.src}
            width={hero.width}
            height={hero.height}
            alt={heroAlt}
            loading="lazy"
            class="hero-image"
          />
        ) : (
          <div class="hero-image hero-placeholder" aria-hidden="true">ðŸ“¦</div>
        )}
      </div>
      <h1>{data.title}</h1>
    </header>

  <article class="download-richtext">
    <Content />
  </article>

    {downloadRows.length > 0 && (
      <section class="download-files">
        <h2 class="download-files-title">Link Download</h2>
        {data.downloadIntro && data.downloadIntro.length > 0 && (
          <div class="download-files-intro">
            {data.downloadIntro.map((paragraph: string) => (
              <p>{paragraph}</p>
            ))}
          </div>
        )}
        <table class="download-files-table">
          <thead>
            <tr>
              <th scope="col">File Name</th>
              {hasSizeColumn && <th scope="col">Size</th>}
              <th scope="col">Download</th>
            </tr>
          </thead>
          <tbody>
            {downloadRows.map((item: any) => (
              <tr>
                <td data-label="File Name">{item.label}</td>
                {hasSizeColumn && <td data-label="Size">{item.size ?? "-"}</td>}
                <td data-label="Download">
                  <a class="download-files-link" href={item.href} download>
                    Download
                  </a>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {data.downloadNote && (
          <p class="download-files-note">{data.downloadNote}</p>
        )}
      </section>
    )}
    <ShareButtons
      title={data.title}
      url={canonicalUrl}
      description={data.description}
      heading="Share this template:"
    />
  </div>
</SiteLayout>
