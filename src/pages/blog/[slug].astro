---
import SiteLayout from '../../layouts/SiteLayout.astro';
import Icon from "../../components/Icon.astro";
import BackNav from "../../components/BackNav.astro";
import { getCollection } from 'astro:content';
import { blogPostingJsonLd } from '../../lib/seo';
import ShareButtons from "../../components/ShareButtons.astro";
import { SITE_URL } from '../../lib/env';
import blogStyles from "../../styles/pages/blog.module.css";
import "../../styles/components/article-detail.css";
import ScrollTopButton from "../../components/ScrollTopButton.astro";
import ContentImage from "../../components/ContentImage.astro";
import HeroImage from "../../components/HeroImage.astro";
import { getOgImageUrl, resolveHero } from "../../lib/images";

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((p: any) => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params;
const entry = (await getCollection('blog')).find((e: any) => e.slug === slug);
if (!entry) {
  return Astro.redirect('/blog/');
}

const { Content } = await entry.render();
const frontmatter = entry.data;

const hero = resolveHero(frontmatter.hero);
const heroAlt = frontmatter.heroAlt ?? frontmatter.title;
const optimizedHero = hero ? await getOgImageUrl(hero, 1200, 'avif') : undefined;
const canonical = `/blog/${slug}/`;
const canonicalUrl = `${SITE_URL}${canonical}`;

const jsonLd = blogPostingJsonLd({
  title: frontmatter.title,
  canonical,
  publishDate: frontmatter.publishDate,
  updatedDate: frontmatter.updatedDate,
  image: optimizedHero ? [optimizedHero] : undefined,
  description: frontmatter.description,
  excerpt: frontmatter.excerpt,
  tags: frontmatter.tags,
  category: frontmatter.category,
});
---

<SiteLayout
  title={frontmatter.title}
  canonical={canonical}
  jsonLd={jsonLd}
  selectedItem="blog"
  description={frontmatter.description || frontmatter.excerpt}
  image={optimizedHero}
  type="article"
  publishedTime={frontmatter.publishDate}
  modifiedTime={frontmatter.updatedDate}
  tags={frontmatter.tags}
  author="Erland Ramdhani"
>
  <BackNav href="/blog/" label="Back to Blog" />
  <article class:list={["content-container", "article-detail"]}>
    <header class="article-header">
      {hero && (
        <HeroImage image={hero} alt={heroAlt} loading="eager" />
      )}
      <h1 style="margin:0 0 .25rem 0;">{frontmatter.title}</h1>
      {(frontmatter.category || frontmatter.publishDate) && (
        <div class={blogStyles['blog-post__meta']}>
          {frontmatter.category && (
            <div class={blogStyles['blog-post__meta-item']}>
              <Icon name="tags" class={blogStyles['blog-post__meta-icon']} />
              <a href={`/blog/category/${(await import('../../lib/blog')).slugifyCategory(String(frontmatter.category))}/`} class={blogStyles['blog-post__meta-text']}>{frontmatter.category}</a>
            </div>
          )}
          {frontmatter.publishDate && (
            <div class={blogStyles['blog-post__meta-item']}>
              <Icon name="date" class={blogStyles['blog-post__meta-icon']} />
              <time datetime={new Date(frontmatter.publishDate).toISOString()} class={blogStyles['blog-post__meta-text']}>
                {new Date(frontmatter.publishDate).toLocaleDateString('id-ID', { dateStyle: 'medium' })}
              </time>
            </div>
          )}
        </div>
      )}
    </header>
    <div class="prose" id="blog-content">
      <Content components={{ img: ContentImage }} />
    </div>
    <ShareButtons title={frontmatter.title} url={canonicalUrl} description={frontmatter.description || frontmatter.excerpt} />
  </article>
  <ScrollTopButton />
  
  
</SiteLayout>

<script>
  import { autoInitBlogAds, autoInitBlogPlaceholders, shouldRenderAds } from "../../lib/adsense";
  import { autoInit as autoInitToc } from "../../lib/toc";
  // Initialize dynamic TOC after content renders
  const runToc = () => {
    try {
      autoInitToc();
    } catch {}
  };
  const runAds = () => {
    try {
      const client = import.meta.env.PUBLIC_ADSENSE_CLIENT || '';
      const slotMid = import.meta.env.PUBLIC_ADSENSE_SLOT_BLOG_MID || '';
      const slotEnd = import.meta.env.PUBLIC_ADSENSE_SLOT_BLOG_END || '';
      if (
        shouldRenderAds({
          client,
          slots: [slotMid, slotEnd],
        })
      ) {
        autoInitBlogAds(client, slotMid, slotEnd);
      } else {
        autoInitBlogPlaceholders();
      }
    } catch {}
  };

  runToc();
  runAds();

  const rebroadcast = () => {
    runToc();
    runAds();
  };

  document.addEventListener('astro:page-load', rebroadcast);
  document.addEventListener('astro:after-swap', rebroadcast);
</script>
