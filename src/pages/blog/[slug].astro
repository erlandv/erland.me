---
import SiteLayout from '../../layouts/SiteLayout.astro';
import Icon from "../../components/Icon.astro";
import BackNav from "../../components/BackNav.astro";
import { getCollection } from 'astro:content';
import { blogPostingJsonLd } from '../../lib/seo';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((p: any) => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params;
const entry = (await getCollection('blog')).find((e: any) => e.slug === slug);
if (!entry) {
  return Astro.redirect('/blog/');
}

const { Content } = await entry.render();
const frontmatter = entry.data;

const heroMap = import.meta.glob('../../content/blog/*/hero.{jpg,jpeg,png,webp,gif,svg}', {
  query: '?url',
  import: 'default',
  eager: true,
});
const heroFallback = Object.entries(heroMap).find(([p]) => p.startsWith(`../../content/blog/${slug}/hero.`))?.[1] as string | undefined;
const heroData = frontmatter.hero ?? heroFallback;
const heroSrc = typeof heroData === 'string' ? heroData : heroData?.src;
const heroWidth = typeof heroData === 'object' ? heroData.width : undefined;
const heroHeight = typeof heroData === 'object' ? heroData.height : undefined;
const heroAlt = frontmatter.heroAlt ?? frontmatter.title;
const canonical = `/blog/${slug}/`;

const jsonLd = blogPostingJsonLd({
  title: frontmatter.title,
  canonical,
  publishDate: frontmatter.publishDate,
  updatedDate: frontmatter.updatedDate,
  image: heroSrc ? [heroSrc] : undefined,
  description: frontmatter.description,
  excerpt: frontmatter.excerpt,
  tags: frontmatter.tags,
  category: frontmatter.category,
});
---

<SiteLayout 
  title={frontmatter.title} 
  canonical={canonical} 
  jsonLd={jsonLd} 
  selectedItem="blog"
  description={frontmatter.description || frontmatter.excerpt}
  image={heroSrc}
  type="article"
  publishedTime={frontmatter.publishDate}
  modifiedTime={frontmatter.updatedDate}
  tags={frontmatter.tags}
  author="Erland Ramdhani"
>
  <BackNav href="/blog/" label="Back to blog" />
  <article class="content-container blog-post">
    <header class="blog-post__header">
      {heroSrc && (
        <img src={heroSrc} width={heroWidth} height={heroHeight} alt={heroAlt} loading="eager" class="hero-image" />
      )}
      <h1 style="margin:0 0 .25rem 0;">{frontmatter.title}</h1>
      {(frontmatter.category || frontmatter.publishDate) && (
        <div class="blog-post__meta">
          {frontmatter.category && (
            <div class="blog-post__meta-item">
              <Icon name="tags" class="blog-post__meta-icon" />
              <span class="blog-post__meta-text">{frontmatter.category}</span>
            </div>
          )}
          {frontmatter.publishDate && (
            <div class="blog-post__meta-item">
              <Icon name="date" class="blog-post__meta-icon" />
              <time datetime={new Date(frontmatter.publishDate).toISOString()} class="blog-post__meta-text">
                {new Date(frontmatter.publishDate).toLocaleDateString('id-ID', { dateStyle: 'medium' })}
              </time>
            </div>
          )}
        </div>
      )}
    </header>
    <div class="prose">
      <Content />
    </div>
  </article>
  
  <script>
    function initCodeBlocks() {
      let codeBlocks = document.querySelectorAll('.prose pre code');
      
      if (codeBlocks.length === 0) {
        codeBlocks = document.querySelectorAll('pre code');
      }
      
      if (codeBlocks.length === 0) {
        codeBlocks = document.querySelectorAll('pre[class*="language-"] code');
      }
      
      codeBlocks.forEach((codeElement) => {
        const preElement = codeElement.parentElement;
        
        if (!preElement || preElement.querySelector('.code-copy-btn')) {
          return;
        }
        
        let language = 'text';
        
        const allClasses = (preElement.className + ' ' + codeElement.className).split(' ').filter(c => c.trim());
        
        for (const className of allClasses) {
          if (className.startsWith('language-')) {
            language = className.replace('language-', '');
            break;
          }
        }
        
        if (language === 'text') {
          const dataLang = preElement.getAttribute('data-language') || preElement.getAttribute('lang');
          if (dataLang) {
            language = dataLang;
          }
        }
        
        if (language === 'text') {
          const preClasses = preElement.className.split(' ');
          for (const className of preClasses) {
            if (className.includes('language-') || className.match(/^[a-z]+$/)) {
              if (className.startsWith('language-')) {
                language = className.replace('language-', '');
              } else if (className !== 'shiki' && className !== 'highlight' && className !== 'prose') {
                language = className;
              }
              break;
            }
          }
        }
        
        preElement.setAttribute('data-language', language);
        
        const copyButton = document.createElement('button');
        copyButton.className = 'code-copy-btn';
        copyButton.setAttribute('aria-label', 'Copy code to clipboard');
        copyButton.innerHTML = `
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M7.5 3H14.6C16.8402 3 17.9603 3 18.816 3.43597C19.5686 3.81947 20.1805 4.43139 20.564 5.18404C21 6.03969 21 7.15979 21 9.4V16.5M6.2 21H14.3C15.4201 21 15.9802 21 16.408 20.782C16.7843 20.5903 17.0903 20.2843 17.282 19.908C17.5 19.4802 17.5 18.9201 17.5 17.8V9.7C17.5 8.57989 17.5 8.01984 17.282 7.59202C17.0903 7.21569 16.7843 6.90973 16.408 6.71799C15.9802 6.5 15.4201 6.5 14.3 6.5H6.2C5.0799 6.5 4.51984 6.5 4.09202 6.71799C3.71569 6.90973 3.40973 7.21569 3.21799 7.59202C3 8.01984 3 8.57989 3 9.7V17.8C3 18.9201 3 19.4802 3.21799 19.908C3.40973 20.2843 3.71569 20.5903 4.09202 20.782C4.51984 21 5.0799 21 6.2 21Z"/>
          </svg>
        `;
        
        copyButton.addEventListener('click', async function() {
          try {
            const text = codeElement.textContent;
            await navigator.clipboard.writeText(text);
            
            copyButton.classList.add('copied');
            
            setTimeout(() => {
              copyButton.classList.remove('copied');
            }, 2000);
            
          } catch (err) {
            console.error('Failed to copy text: ', err);
            
            const textArea = document.createElement('textarea');
            textArea.value = codeElement.textContent;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            
            copyButton.classList.add('copied');
            setTimeout(() => {
              copyButton.classList.remove('copied');
            }, 2000);
          }
        });
        
        preElement.appendChild(copyButton);
      });
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      requestAnimationFrame(() => {
        setTimeout(initCodeBlocks, 100);
      });
    });
    
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initCodeBlocks);
    } else {
      requestAnimationFrame(() => {
        setTimeout(initCodeBlocks, 100);
      });
    }
  </script>
</SiteLayout>
