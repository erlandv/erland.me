---
import SiteLayout from '@layouts/SiteLayout.astro';
import BackNav from '@components/BackNav/BackNav.astro';
import PostCard from '@components/PostCard/PostCard.astro';
import Pagination from '@components/Pagination/Pagination.astro';
import listing from '@/styles/pages/listing.module.css';
import catStyles from '@/pages/blog/styles/_category.module.css';
import { loadAllPosts, slugifyCategory, slicePage } from '@lib/blog';
import { categoriesIndexJsonLd, breadcrumbJsonLd } from '@lib/seo';
import type { ImageMetadata } from 'astro';

const posts = await loadAllPosts();

type CatInfo = {
  name: string;
  slug: string;
  count: number;
  latest: {
    slug: string;
    title: string;
    excerpt: string | null;
    date: Date | null;
  } | null;
  hero: ImageMetadata | null;
};

const getExcerpt = (post: any) =>
  post.data?.excerpt ?? post.data?.description ?? '';

const categoriesMap = new Map<string, CatInfo>();
for (const p of posts) {
  const raw = (p.data?.category ?? '').toString();
  if (!raw) continue;
  const slug = slugifyCategory(raw);
  if (!slug) continue;
  const existing = categoriesMap.get(slug);
  if (!existing) {
    categoriesMap.set(slug, {
      name: raw,
      slug,
      count: 1,
      latest: p
        ? {
            slug: p.slug,
            title: p.data?.title,
            excerpt: getExcerpt(p),
            date: p.date ?? null,
          }
        : null,
      hero: p.data?.hero ?? null,
    });
  } else {
    existing.count += 1;
    // posts is sorted desc by date; ensure latest is the most recent
    const pDate = p.date?.valueOf() ?? 0;
    const eDate = existing.latest?.date?.valueOf() ?? -1;
    if (pDate > eDate) {
      existing.latest = {
        slug: p.slug,
        title: p.data?.title,
        excerpt: getExcerpt(p),
        date: p.date ?? null,
      };
      existing.hero = p.data?.hero ?? null;
    }
  }
}

const categories = Array.from(categoriesMap.values()).sort((a, b) =>
  a.name.localeCompare(b.name, 'id')
);

// Build paginated posts for each category to mirror /blog/
const pageSize = 10;
const byCategory = categories.map(cat => {
  const catPosts = posts.filter(
    p => slugifyCategory(String(p.data?.category || '')) === cat.slug
  );
  const totalPages = Math.max(1, Math.ceil(catPosts.length / pageSize));
  const pages = Array.from({ length: totalPages }, (_, i) =>
    slicePage(catPosts, i + 1, pageSize)
  );
  return { cat, pages, totalPages };
});
---

<SiteLayout
  title='Blog Categories'
  canonical='/blog/category/'
  description='Daftar kategori blog dan jumlah artikelnya, lengkap dengan artikel terbaru per kategori.'
  selectedItem='blog'
  jsonLd={[
    categoriesIndexJsonLd(
      'Blog Categories',
      '/blog/category/',
      categories.map((c, i) => ({
        url: `/blog/category/${c.slug}/`,
        name: c.name,
        position: i + 1,
      }))
    ),
    breadcrumbJsonLd([
      { name: 'Blog', url: '/blog/' },
      { name: 'Categories', url: '/blog/category/' },
    ]),
  ]}
>
  <BackNav href='/blog/' label='Back to Blog' />

  <div class='content-container'>
    <h1>Blog Categories</h1>

    <div id='category-filter' class={catStyles.filterContainer}>
      {
        categories.map(c => (
          <a
            href={`#cat-${c.slug}-page-1`}
            class:list={['cat-filter-btn', 'btn']}
            data-cat={c.slug}
          >
            {c.name}
          </a>
        ))
      }
    </div>

    <section class={listing['items-container']}>
      {
        byCategory.map(({ cat, pages, totalPages }) =>
          pages.map((pagePosts, idx) => {
            const page = idx + 1;
            const pageHref = (n: number) => `#cat-${cat.slug}-page-${n}`;
            return (
              <div
                class={listing['resouce-items']}
                data-cat-page
                data-cat={cat.slug}
                data-page={String(page)}
                style='display:none;'
              >
                {pagePosts.map(post => {
                  const hero = post.data?.hero ?? null;
                  const excerpt = getExcerpt(post);
                  const dateLabel = post.date
                    ? post.date.toLocaleDateString('id-ID', {
                        dateStyle: 'medium',
                      })
                    : null;
                  return (
                    <PostCard
                      href={`/blog/${post.slug}/`}
                      title={post.data.title}
                      hero={hero}
                      alt={post.data.heroAlt ?? post.data.title}
                      category={post.data?.category ?? null}
                      dateLabel={dateLabel}
                      excerpt={excerpt}
                    />
                  );
                })}
                {pagePosts.length === 0 && (
                  <p style='opacity:.8;'>Tidak ada artikel.</p>
                )}
                {totalPages > 1 && (
                  <Pagination
                    page={page}
                    totalPages={totalPages}
                    pageHref={pageHref}
                  />
                )}
              </div>
            );
          })
        )
      }
      {
        categories.length === 0 && (
          <p style='opacity:.8;'>Tidak ada kategori yang tersedia.</p>
        )
      }
    </section>
  </div>
</SiteLayout>

<script is:inline>!function(){function e(){var e=(location.hash||"").match(/^#cat-([^#]+?)(?:-page-(\d+))?$/);return e?{cat:e[1],page:Math.max(1,parseInt(e[2]||"1",10)||1)}:null}function t(e,t){document.querySelectorAll("[data-cat-page]").forEach(function(e){e instanceof HTMLElement&&(e.style.display="none")});var n=document.querySelector('[data-cat-page][data-cat="'+e+'"][data-page="'+t+'"]');n instanceof HTMLElement&&(n.style.display=""),document.querySelectorAll("#category-filter .cat-filter-btn").forEach(function(t){if(t instanceof HTMLElement){var n=t.getAttribute("data-cat");n===e?t.classList.add("is-active"):t.classList.remove("is-active")}})}function n(){var n=e();if(!n){var a=Array.from(new Set(Array.from(document.querySelectorAll("[data-cat-page]")).map(function(e){return e.getAttribute("data-cat")}).filter(Boolean)));if(a.length>0){var c=a[Math.floor(Math.random()*a.length)];location.replace("#cat-"+c+"-page-1"),n={cat:c,page:1}}}n&&t(n.cat,n.page),document.querySelectorAll("#category-filter .cat-filter-btn").forEach(function(e){e.addEventListener("click",function(n){n.preventDefault();var a=e.getAttribute("data-cat");if(a){var c="#cat-"+a+"-page-1";location.hash!==c&&(location.hash=c),t(a,1)}})})}window.addEventListener("hashchange",function(){var n=e();n&&t(n.cat,n.page)}),document.addEventListener("click",function(n){var a=n.target;if(a){var c=null;if(a instanceof HTMLAnchorElement)c=a;else if(a instanceof Element&&"function"==typeof a.closest&&(c=a.closest("a")),c){var r=c.getAttribute("href")||"";if(r.startsWith("#cat-")){var i=r.match(/^#cat-([^#]+?)(?:-page-(\d+))?$/);if(i){n.preventDefault();var o=i[1],s=Math.max(1,parseInt(i[2]||"1",10)||1);location.hash!==r&&(location.hash=r),t(o,s)}}}}}),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",n):n(),document.addEventListener("astro:page-load",n),document.addEventListener("astro:after-swap",n)}();</script>
