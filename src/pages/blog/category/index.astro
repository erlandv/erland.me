---
import SiteLayout from '../../../layouts/SiteLayout.astro';
import BackNav from "../../../components/BackNav.astro";
import Icon from "../../../components/Icon.astro";
import postCardStyles from "../../../components/PostCard/post-card.module.css";
import listing from "../../../styles/pages/listing.module.css";
import { loadAllPosts, slugifyCategory } from '../../../lib/blog';

const posts = await loadAllPosts();

type CatInfo = {
  name: string;
  slug: string;
  count: number;
  latest: {
    slug: string;
    title: string;
    excerpt: string | null;
    date: Date | null;
  } | null;
  hero: { src: string; width: number; height: number } | null;
};

const getExcerpt = (post: any) => post.data?.excerpt ?? post.data?.description ?? '';

const normalizeHero = (hero: any) => {
  if (!hero) return null;
  if (typeof hero === 'string') {
    return { src: hero, width: 512, height: 512 };
  }
  const { src, width, height } = hero;
  return { src, width, height };
};

const categoriesMap = new Map<string, CatInfo>();
for (const p of posts) {
  const raw = (p.data?.category ?? '').toString();
  if (!raw) continue;
  const slug = slugifyCategory(raw);
  if (!slug) continue;
  const existing = categoriesMap.get(slug);
  if (!existing) {
    categoriesMap.set(slug, {
      name: raw,
      slug,
      count: 1,
      latest: p
        ? {
            slug: p.slug,
            title: p.data?.title,
            excerpt: getExcerpt(p),
            date: p.date ?? null,
          }
        : null,
      hero: normalizeHero(p.data?.hero ?? p.hero) as any,
    });
  } else {
    existing.count += 1;
    // posts is sorted desc by date; ensure latest is the most recent
    const pDate = p.date?.valueOf() ?? 0;
    const eDate = existing.latest?.date?.valueOf() ?? -1;
    if (pDate > eDate) {
      existing.latest = {
        slug: p.slug,
        title: p.data?.title,
        excerpt: getExcerpt(p),
        date: p.date ?? null,
      };
      existing.hero = normalizeHero(p.data?.hero ?? p.hero) as any;
    }
  }
}

const categories = Array.from(categoriesMap.values()).sort((a, b) =>
  a.name.localeCompare(b.name, 'id')
);
---

<SiteLayout
  title="Blog Categories"
  canonical="/blog/category/"
  description="Daftar kategori blog dan jumlah artikelnya, lengkap dengan artikel terbaru per kategori."
  selectedItem="blog"
>
  <BackNav href="/blog/" label="Back to blog" />

  <div class="content-container">
    <h1>Blog Categories</h1>

    <!-- Simple search/filter for categories -->
    <div style="margin: 16px 0 24px 0;">
      <label for="category-search" class="sr-only">Cari kategori</label>
      <input
        id="category-search"
        type="text"
        placeholder="Cari kategori..."
        style="width:100%;max-width:520px;padding:10px 12px;border-radius:8px;border:1px solid rgba(138,180,255,.25);background:#0b1020;color:#fff;"
        aria-label="Cari kategori"
      />
    </div>

    <section class={listing['items-container']}>
      <div class={listing['resouce-items']} id="category-list">
        {categories.map((cat) => (
          <article class:list={[postCardStyles['resource-card'], 'resource-card', 'post-card']} data-name={cat.name.toLowerCase()}>
            <div class={postCardStyles["post-card__inner"]}>
              <div class={postCardStyles["post-card__thumb"]}>
                {cat.hero ? (
                  <img
                    src={cat.hero.src}
                    width={cat.hero.width}
                    height={cat.hero.height}
                    alt={cat.name}
                    loading="lazy"
                    class={postCardStyles["post-card__img"]}
                  />
                ) : (
                  <div class={postCardStyles["post-card__thumb--placeholder"]} aria-hidden="true"></div>
                )}
              </div>
              <div class={postCardStyles["post-card__body"]}>
                <header class={postCardStyles["post-card__header"]}>
                  <h2 class={postCardStyles["post-card__title"]}>
                    <a href={`/blog/category/${cat.slug}/`} class={postCardStyles["post-card__title-link"]}>{cat.name}</a>
                  </h2>
                  <div class={postCardStyles["post-card__meta"]}>
                    <div class={postCardStyles["post-card__meta-item"]}>
                      <Icon name="tags" class={postCardStyles["post-card__meta-icon"]} />
                      <span class={postCardStyles["post-card__category"]}>{cat.count} artikel</span>
                    </div>
                  </div>
                </header>
                {cat.latest && (
                  <p class={postCardStyles["post-card__excerpt"]}>
                    <a href={`/blog/${cat.latest.slug}/`} style="text-decoration:none;color:var(--color-secondary);font-weight:600;">{cat.latest.title}</a>
                    {cat.latest.excerpt ? ` â€” ${cat.latest.excerpt}` : ''}
                  </p>
                )}
                <a href={`/blog/category/${cat.slug}/`} class={postCardStyles["post-card__readmore"]}>
                  <span>Lihat kategori</span>
                  <Icon name="readmore" class={postCardStyles["post-card__readmore-icon"]} />
                </a>
              </div>
            </div>
          </article>
        ))}
        {categories.length === 0 && (
          <p style="opacity:.8;">Tidak ada kategori yang tersedia.</p>
        )}
      </div>
    </section>
  </div>
</SiteLayout>

<script define:vars={{ categories }} is:inline>
  // Filter category cards by the input value
  function setupCategoryFilter() {
    /** @type {any} */
    const input = document.getElementById('category-search');
    /** @type {any} */
    const list = document.getElementById('category-list');
    if (!input || !list) return;

    const handle = () => {
      const q = String((input && input.value) || '').trim().toLowerCase();
      const items = Array.from(list.querySelectorAll('[data-name]'));
      if (!q) {
        items.forEach((el) => {
          if (el && el.style) el.style.display = '';
        });
        return;
      }
      items.forEach((el) => {
        const name = String((el.getAttribute && el.getAttribute('data-name')) || '').toLowerCase();
        if (el && el.style) el.style.display = name.includes(q) ? '' : 'none';
      });
    };
    input.addEventListener('input', handle);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupCategoryFilter);
  } else {
    setupCategoryFilter();
  }
</script>
