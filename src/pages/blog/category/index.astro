---
import SiteLayout from '@layouts/SiteLayout.astro';
import BackNav from '@components/BackNav.astro';
import PostCard from '@components/PostCard.astro';
import Pagination from '@components/Pagination.astro';
//
import listing from '@/styles/pages/listing.module.css';
import catStyles from '@/styles/pages/category.module.css';
import { loadAllPosts, slugifyCategory, slicePage } from '@lib/blog';
import { categoriesIndexJsonLd, breadcrumbJsonLd } from '@lib/seo';
import type { ImageMetadata } from 'astro';

const posts = await loadAllPosts();

type CatInfo = {
  name: string;
  slug: string;
  count: number;
  latest: {
    slug: string;
    title: string;
    excerpt: string | null;
    date: Date | null;
  } | null;
  hero: ImageMetadata | null;
};

const getExcerpt = (post: any) =>
  post.data?.excerpt ?? post.data?.description ?? '';

/* normalizeHero removed: frontmatter already provides ImageMetadata via schema(image()) */

const categoriesMap = new Map<string, CatInfo>();
for (const p of posts) {
  const raw = (p.data?.category ?? '').toString();
  if (!raw) continue;
  const slug = slugifyCategory(raw);
  if (!slug) continue;
  const existing = categoriesMap.get(slug);
  if (!existing) {
    categoriesMap.set(slug, {
      name: raw,
      slug,
      count: 1,
      latest: p
        ? {
            slug: p.slug,
            title: p.data?.title,
            excerpt: getExcerpt(p),
            date: p.date ?? null,
          }
        : null,
      hero: p.data?.hero ?? null,
    });
  } else {
    existing.count += 1;
    // posts is sorted desc by date; ensure latest is the most recent
    const pDate = p.date?.valueOf() ?? 0;
    const eDate = existing.latest?.date?.valueOf() ?? -1;
    if (pDate > eDate) {
      existing.latest = {
        slug: p.slug,
        title: p.data?.title,
        excerpt: getExcerpt(p),
        date: p.date ?? null,
      };
      existing.hero = p.data?.hero ?? null;
    }
  }
}

const categories = Array.from(categoriesMap.values()).sort((a, b) =>
  a.name.localeCompare(b.name, 'id')
);

// Build paginated posts for each category to mirror /blog/
const pageSize = 10;
const byCategory = categories.map(cat => {
  const catPosts = posts.filter(
    p => slugifyCategory(String(p.data?.category || '')) === cat.slug
  );
  const totalPages = Math.max(1, Math.ceil(catPosts.length / pageSize));
  const pages = Array.from({ length: totalPages }, (_, i) =>
    slicePage(catPosts, i + 1, pageSize)
  );
  return { cat, pages, totalPages };
});
---

<SiteLayout
  title='Blog Categories'
  canonical='/blog/category/'
  description='Daftar kategori blog dan jumlah artikelnya, lengkap dengan artikel terbaru per kategori.'
  selectedItem='blog'
  jsonLd={[
    categoriesIndexJsonLd(
      'Blog Categories',
      '/blog/category/',
      categories.map((c, i) => ({
        url: `/blog/category/${c.slug}/`,
        name: c.name,
        position: i + 1,
      }))
    ),
    breadcrumbJsonLd([
      { name: 'Blog', url: '/blog/' },
      { name: 'Categories', url: '/blog/category/' },
    ]),
  ]}
>
  <BackNav href='/blog/' label='Back to Blog' />

  <div class='content-container'>
    <h1>Blog Categories</h1>

    <div id='category-filter' class={catStyles.filterContainer}>
      {
        categories.map(c => (
          <a
            href={`#cat-${c.slug}-page-1`}
            class:list={['cat-filter-btn', 'btn']}
            data-cat={c.slug}
          >
            {c.name}
          </a>
        ))
      }
    </div>

    <section class={listing['items-container']}>
      {
        byCategory.map(({ cat, pages, totalPages }) =>
          pages.map((pagePosts, idx) => {
            const page = idx + 1;
            const pageHref = (n: number) => `#cat-${cat.slug}-page-${n}`;
            return (
              <div
                class={listing['resouce-items']}
                data-cat-page
                data-cat={cat.slug}
                data-page={String(page)}
                style='display:none;'
              >
                {pagePosts.map(post => {
                  const hero = post.data?.hero ?? null;
                  const excerpt = getExcerpt(post);
                  const dateLabel = post.date
                    ? post.date.toLocaleDateString('id-ID', {
                        dateStyle: 'medium',
                      })
                    : null;
                  return (
                    <PostCard
                      href={`/blog/${post.slug}/`}
                      title={post.data.title}
                      hero={hero}
                      alt={post.data.heroAlt ?? post.data.title}
                      category={post.data?.category ?? null}
                      dateLabel={dateLabel}
                      excerpt={excerpt}
                    />
                  );
                })}
                {pagePosts.length === 0 && (
                  <p style='opacity:.8;'>Tidak ada artikel.</p>
                )}
                {totalPages > 1 && (
                  <Pagination
                    page={page}
                    totalPages={totalPages}
                    pageHref={pageHref}
                  />
                )}
              </div>
            );
          })
        )
      }
      {
        categories.length === 0 && (
          <p style='opacity:.8;'>Tidak ada kategori yang tersedia.</p>
        )
      }
    </section>
  </div>
</SiteLayout>

<script is:inline>
  function parseHash() {
    const m = (location.hash || '').match(/^#cat-([^#]+?)(?:-page-(\d+))?$/);
    if (!m) return null;
    return { cat: m[1], page: Math.max(1, parseInt(m[2] || '1', 10) || 1) };
  }

  function showCatPage(cat, page) {
    const all = document.querySelectorAll('[data-cat-page]');
    all.forEach(el =>
      el instanceof HTMLElement ? (el.style.display = 'none') : null
    );
    const active = document.querySelector(
      `[data-cat-page][data-cat="${cat}"][data-page="${page}"]`
    );
    if (active instanceof HTMLElement) active.style.display = '';

    // toggle active state on filter buttons
    document
      .querySelectorAll('#category-filter .cat-filter-btn')
      .forEach(btn => {
        if (!(btn instanceof HTMLElement)) return;
        const slug = btn.getAttribute('data-cat');
        if (slug === cat) {
          btn.classList.add('is-active');
        } else {
          btn.classList.remove('is-active');
        }
      });
  }

  function init() {
    let hp = parseHash();
    if (!hp) {
      // pick random category
      const cats = Array.from(document.querySelectorAll('[data-cat-page]'))
        .map(el => el.getAttribute('data-cat'))
        .filter(Boolean);
      const unique = Array.from(new Set(cats));
      if (unique.length > 0) {
        const cat = unique[Math.floor(Math.random() * unique.length)];
        location.replace(`#cat-${cat}-page-1`);
        hp = { cat, page: 1 };
      }
    }
    if (hp) showCatPage(hp.cat, hp.page);

    // Bind filter buttons clicks
    document
      .querySelectorAll('#category-filter .cat-filter-btn')
      .forEach(btn => {
        btn.addEventListener('click', e => {
          e.preventDefault();
          const cat = btn.getAttribute('data-cat');
          if (!cat) return;
          const target = `#cat-${cat}-page-1`;
          if (location.hash !== target) {
            location.hash = target;
          }
          showCatPage(cat, 1);
        });
      });
  }

  window.addEventListener('hashchange', () => {
    const hp = parseHash();
    if (hp) showCatPage(hp.cat, hp.page);
  });

  // Delegate clicks for pagination links with hash targets
  document.addEventListener('click', e => {
    const t = e.target;
    if (!t) return;
    var a = null;
    if (t instanceof HTMLAnchorElement) {
      a = t;
    } else if (t instanceof Element && typeof t.closest === 'function') {
      a = t.closest('a');
    }
    if (!a) return;
    const href = a.getAttribute('href') || '';
    if (!href.startsWith('#cat-')) return;
    const m = href.match(/^#cat-([^#]+?)(?:-page-(\d+))?$/);
    if (!m) return;
    e.preventDefault();
    const cat = m[1];
    const page = Math.max(1, parseInt(m[2] || '1', 10) || 1);
    if (location.hash !== href) {
      location.hash = href;
    }
    showCatPage(cat, page);
  });

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  // Re-initialize on Astro client router transitions if present
  document.addEventListener('astro:page-load', init);
  document.addEventListener('astro:after-swap', init);
</script>
