---
import SiteLayout from '@layouts/SiteLayout.astro';
import BackNav from '@components/BackNav/BackNav.astro';
import PostCard from '@components/PostCard/PostCard.astro';
import Pagination from '@components/Pagination/Pagination.astro';
import SearchInput from '@components/SearchInput/SearchInput.astro';
import { postToSearchable } from '@lib/search';
import { loadAllPosts, slugifyCategory } from '@lib/blog';
import { collectionPageJsonLd } from '@lib/seo';
import listing from '@styles/pages/listing.module.css';

// Generate static paths for pages in each category
export async function getStaticPaths() {
  const posts = await loadAllPosts();
  const categoryBuckets = new Map<string, number>();

  for (const p of posts) {
    const cat = (p.data?.category ?? '').toString().toLowerCase().trim();
    if (!cat) continue;
    categoryBuckets.set(cat, (categoryBuckets.get(cat) ?? 0) + 1);
  }

  const pageSize = 10;
  const paths: { params: { category: string; page: string } }[] = [];
  for (const [cat, count] of categoryBuckets) {
    const totalPages = Math.max(1, Math.ceil(count / pageSize));
    // Only page 2..N here (page 1 handled by /blog/category/[category])
    for (let i = 2; i <= totalPages; i++) {
      paths.push({ params: { category: cat, page: String(i) } });
    }
  }
  return paths;
}

const allPosts = await loadAllPosts();
const categoryParam = (Astro.params.category ?? '').toString().toLowerCase();

// Filter posts by category (case-insensitive compare)
const filtered = allPosts.filter((p: any) => {
  const cat = slugifyCategory((p.data?.category ?? '').toString());
  return cat === categoryParam;
});

// Pagination
const pageSize = 10;
const totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
const param = Number(Astro.params.page ?? '1');
const page = !Number.isFinite(param) || param < 1 ? 1 : Math.min(totalPages, Math.floor(param));
const paginated = filtered.slice((page - 1) * pageSize, page * pageSize);
const pageHref = (n: number) => (n === 1 ? `/blog/category/${categoryParam}/` : `/blog/category/${categoryParam}/page/${n}/`);

/* normalizeHero removed: frontmatter hero is ImageMetadata via schema(image()) */

const getHero = (post: any) => post.data?.hero ?? null;
const getExcerpt = (post: any) => post.data?.excerpt ?? post.data?.description ?? '';
const getCategory = (post: any) => post.data?.category ?? null;

// Convert posts to searchable format (used by SearchInput via window.__SEARCH_POSTS__)
const searchablePosts = filtered.map(postToSearchable);
---

<SiteLayout
  title={`Blog Archives in "${categoryParam}" - Page ${page}`}
  canonical={pageHref(page)}
  description={`Halaman ${page} dari arsip kategori \"${categoryParam}\".`}
  prevHref={page > 1 ? pageHref(page - 1) : undefined}
  nextHref={page < totalPages ? pageHref(page + 1) : undefined}
  jsonLd={collectionPageJsonLd(
    `Blog Category: ${categoryParam} - Page ${page}`,
    pageHref(page),
    paginated.map((p: any, i: number) => ({
      url: `/blog/${p.slug}/`,
      name: p.data.title,
      position: (page - 1) * pageSize + i + 1,
    }))
  )}
  selectedItem="blog"
  preloadSearch
>
  <BackNav href="/" label="Back" />

  <div class="content-container">
    <h1>Blog Posts</h1>
    
    <SearchInput posts={searchablePosts} placeholder={`Cari artikel di kategori \"${categoryParam}\"...`} />
    <section class={listing['items-container']}>
      <div class={listing['resouce-items']}>
        {paginated.map((post: any) => {
          const hero = getHero(post);
          const excerpt = getExcerpt(post);
          const dateLabel = post.date
            ? post.date.toLocaleDateString('id-ID', { dateStyle: 'medium' })
            : null;
          return (
            <PostCard
              href={`/blog/${post.slug}/`}
              title={post.data.title}
              hero={hero}
              alt={post.data.heroAlt ?? post.data.title}
              category={getCategory(post)}
              dateLabel={dateLabel}
              excerpt={excerpt}
            />
          );
        })}

        {filtered.length === 0 && (
          <p style="opacity:.8;">Belum ada tulisan untuk kategori ini.</p>
        )}

        {filtered.length > pageSize && (
          <Pagination page={page} totalPages={totalPages} pageHref={pageHref} />
        )}
      </div>
    </section>
  </div>

</SiteLayout>

<script type="module" define:vars={{ searchablePosts }} is:inline>
  // Runtime-safe access to onRouteChange via window bridge
  const onRouteChange = (window.__erland_router_events && window.__erland_router_events.onRouteChange) ||
    ((listener) => {
      console.warn('onRouteChange not available: inline router reinit will be a no-op');
      return () => undefined;
    });

  // Make searchable posts available to the search component
  function initSearchData() {
    try {
      window.__SEARCH_POSTS__ = searchablePosts;
    } catch (error) {
      console.error('Failed to initialize search posts data:', error);
    }
  }

  // Setup router reinit for ClientRouter compatibility
  let routerSetup = false;
  function setupRouterReinit() {
    if (routerSetup) return;
    routerSetup = true;

    const run = () => {
      if (window.location.pathname.startsWith('/blog/category')) {
        initSearchData();
      }
    };

    document.addEventListener('astro:page-load', run);
    document.addEventListener('astro:after-swap', run);
    onRouteChange(run);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initSearchData();
      setupRouterReinit();
    });
  } else {
    initSearchData();
    setupRouterReinit();
  }
</script>
