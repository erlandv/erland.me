---
import SiteLayout from '../../../layouts/SiteLayout.astro';
import Icon from "../../../components/Icon.astro";
import BackNav from "../../../components/BackNav.astro";
import PostCard from "../../../components/PostCard.astro";
import Pagination from "../../../components/Pagination.astro";
import { loadAllPosts } from '../../../lib/blog';
import { collectionPageJsonLd } from '../../../lib/seo';
import Footer from "../../../components/Footer.astro";

// Generate static paths for pages 2..N (page 1 handled by /blog)
export async function getStaticPaths() {
  const posts = await loadAllPosts();
  const pageSize = 10;
  const totalPages = Math.max(1, Math.ceil(posts.length / pageSize));
  return Array.from({ length: Math.max(0, totalPages - 1) }).map((_, i) => ({
    params: { page: String(i + 2) },
  }));
}

const posts = await loadAllPosts();

// Pagination
const pageSize = 10;
const totalPages = Math.max(1, Math.ceil(posts.length / pageSize));
const param = Number(Astro.params.page ?? '1');
const page = !Number.isFinite(param) || param < 1 ? 1 : Math.min(totalPages, Math.floor(param));
const paginated = posts.slice((page - 1) * pageSize, page * pageSize);
const pageHref = (n: number) => (n === 1 ? `/blog/` : `/blog/page/${n}/`);

const normalizeHero = (hero: any) => {
  if (!hero) return null;
  if (typeof hero === 'string') {
    return { src: hero, width: 512, height: 512 };
  }
  const { src, width, height } = hero;
  return { src, width, height };
};

const getHero = (post: any) => normalizeHero(post.data?.hero ?? post.hero);
const getExcerpt = (post: any) => post.data?.excerpt ?? post.data?.description ?? '';
const getCategory = (post: any) => post.data?.category ?? null;
---

<SiteLayout
  title={`Blog | Page ${page}`}
  canonical={pageHref(page)}
  prevHref={page > 1 ? pageHref(page - 1) : undefined}
  nextHref={page < totalPages ? pageHref(page + 1) : undefined}
  jsonLd={collectionPageJsonLd(
    `Blog - Page ${page}`,
    pageHref(page),
    paginated.map((p, i) => ({
      url: `/blog/${p.slug}/`,
      name: p.data.title,
      position: (page - 1) * pageSize + i + 1,
    }))
  )}
  selectedItem="blog"
>
  <BackNav href="/" label="Back" />

  <div class="content-container">
    <h1>Blog</h1>
    <section class="items-container">
      <div class="resouce-items">
        {paginated.map((post) => {
          const hero = getHero(post);
          const excerpt = getExcerpt(post);
          const dateLabel = post.date
            ? post.date.toLocaleDateString('id-ID', { dateStyle: 'medium' })
            : null;
          return (
            <PostCard
              href={`/blog/${post.slug}/`}
              title={post.data.title}
              hero={hero}
              alt={post.data.heroAlt ?? post.data.title}
              category={getCategory(post)}
              dateLabel={dateLabel}
              excerpt={excerpt}
            />
          );
        })}

        {posts.length === 0 && (
          <p style="opacity:.8;">Belum ada tulisan. Tambahkan file di <code>src/content/blog/[slug]/index.md</code> ya ✍️</p>
        )}

        {posts.length > pageSize && (
          <Pagination page={page} totalPages={totalPages} pageHref={pageHref} />
        )}
      </div>
    </section>
  </div>
</SiteLayout>
