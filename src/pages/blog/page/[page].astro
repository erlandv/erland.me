---
import SiteLayout from '../../../layouts/SiteLayout.astro';
import BackNav from "../../../components/BackNav.astro";
import PostCard from "../../../components/PostCard.astro";
import Pagination from "../../../components/Pagination.astro";
import SearchInput from "../../../components/SearchInput.astro";
import { postToSearchable } from '../../../lib/search';
import { loadAllPosts } from '../../../lib/blog';
import { collectionPageJsonLd } from '../../../lib/seo';
import listing from "../../../styles/pages/listing.module.css";

// Generate static paths for pages 2..N (page 1 handled by /blog)
export async function getStaticPaths() {
  const posts = await loadAllPosts();
  const pageSize = 10;
  const totalPages = Math.max(1, Math.ceil(posts.length / pageSize));
  return Array.from({ length: Math.max(0, totalPages - 1) }).map((_, i) => ({
    params: { page: String(i + 2) },
  }));
}

const posts = await loadAllPosts();

// Pagination
const pageSize = 10;
const totalPages = Math.max(1, Math.ceil(posts.length / pageSize));
const param = Number(Astro.params.page ?? '1');
const page = !Number.isFinite(param) || param < 1 ? 1 : Math.min(totalPages, Math.floor(param));
const paginated = posts.slice((page - 1) * pageSize, page * pageSize);
const pageHref = (n: number) => (n === 1 ? `/blog/` : `/blog/page/${n}/`);

const normalizeHero = (hero: any) => {
  if (!hero) return null;
  if (typeof hero === 'string') {
    return { src: hero, width: 512, height: 512 };
  }
  const { src, width, height } = hero;
  return { src, width, height };
};

const getHero = (post: any) => normalizeHero(post.data?.hero ?? post.hero);
const getExcerpt = (post: any) => post.data?.excerpt ?? post.data?.description ?? '';
const getCategory = (post: any) => post.data?.category ?? null;

// Convert posts to searchable format (used by SearchInput via window.__SEARCH_POSTS__)
const searchablePosts = posts.map(postToSearchable);
---

<SiteLayout
  title={`Blog Archives Page ${page}`}
  canonical={pageHref(page)}
  description={`Halaman ${page} dari arsip blog: Berbagai artikel yang ditulis untuk menyalurkan hobi walau tak tentu waktu publikasi.`}
  prevHref={page > 1 ? pageHref(page - 1) : undefined}
  nextHref={page < totalPages ? pageHref(page + 1) : undefined}
  jsonLd={collectionPageJsonLd(
    `Blog Archives - Page ${page}`,
    pageHref(page),
    paginated.map((p, i) => ({
      url: `/blog/${p.slug}/`,
      name: p.data.title,
      position: (page - 1) * pageSize + i + 1,
    }))
  )}
  selectedItem="blog"
>
  <BackNav href="/" label="Back" />

  <div class="content-container">
    <h1>Blog Posts</h1>
    
    <!-- Search Component -->
    <SearchInput posts={searchablePosts} placeholder="Cari artikel..." />
    <section class={listing['items-container']}>
      <div class={listing['resouce-items']}>
        {paginated.map((post) => {
          const hero = getHero(post);
          const excerpt = getExcerpt(post);
          const dateLabel = post.date
            ? post.date.toLocaleDateString('id-ID', { dateStyle: 'medium' })
            : null;
          return (
            <PostCard
              href={`/blog/${post.slug}/`}
              title={post.data.title}
              hero={hero}
              alt={post.data.heroAlt ?? post.data.title}
              category={getCategory(post)}
              dateLabel={dateLabel}
              excerpt={excerpt}
            />
          );
        })}

        {posts.length === 0 && (
          <p style="opacity:.8;">Belum ada tulisan. Tambahkan file di <code>src/content/blog/[slug]/index.md</code> ya ✍️</p>
        )}

        {posts.length > pageSize && (
          <Pagination page={page} totalPages={totalPages} pageHref={pageHref} />
        )}
      </div>
    </section>
  </div>
</SiteLayout>

<script define:vars={{ searchablePosts }} is:inline>
  // Make searchable posts available to the search component
  function initSearchData() {
    try {
      window.__SEARCH_POSTS__ = searchablePosts;
    } catch (error) {
      console.error('Failed to initialize search posts data:', error);
    }
  }

  // Setup router reinit for ClientRouter compatibility
  let routerSetup = false;
  function setupRouterReinit() {
    if (routerSetup) return;
    routerSetup = true;

    const run = () => {
      // Only initialize on blog pages
      if (window.location.pathname.startsWith('/blog')) {
        initSearchData();
      }
    };

    // Astro transitions events (if ClientRouter is used)
    document.addEventListener('astro:page-load', run);
    document.addEventListener('astro:after-swap', run);

    // Navigation via history
    window.addEventListener('popstate', run);
    const _push = history.pushState && history.pushState.bind(history);
    if (_push) {
      history.pushState = function (data, unused, url) {
        const ret = _push(data, unused, url);
        // re-bind after navigation
        setTimeout(run, 10);
        return ret;
      };
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initSearchData();
      setupRouterReinit();
    });
  } else {
    initSearchData();
    setupRouterReinit();
  }
</script>
