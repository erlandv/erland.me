---
import Header from '../../../components/Header.astro';
import Sidebar from '../../../components/Sidebar.astro';
import Icon from "../../../components/Icon.astro";
import { loadAllPosts } from '../../../lib/blog';
import Footer from "../../../components/Footer.astro";

// Generate static paths for pages 2..N (page 1 handled by /blog)
export async function getStaticPaths() {
  const posts = await loadAllPosts();
  const pageSize = 10;
  const totalPages = Math.max(1, Math.ceil(posts.length / pageSize));
  return Array.from({ length: Math.max(0, totalPages - 1) }).map((_, i) => ({
    params: { page: String(i + 2) },
  }));
}

const posts = await loadAllPosts();

// Pagination
const pageSize = 10;
const totalPages = Math.max(1, Math.ceil(posts.length / pageSize));
const param = Number(Astro.params.page ?? '1');
const page = !Number.isFinite(param) || param < 1 ? 1 : Math.min(totalPages, Math.floor(param));
const paginated = posts.slice((page - 1) * pageSize, page * pageSize);
const pageHref = (n: number) => (n === 1 ? `/blog/` : `/blog/page/${n}/`);

const normalizeHero = (hero: any) => {
  if (!hero) return null;
  if (typeof hero === 'string') {
    return { src: hero, width: 512, height: 512 };
  }
  const { src, width, height } = hero;
  return { src, width, height };
};

const getHero = (post: any) => normalizeHero(post.data?.hero ?? post.hero);
const getExcerpt = (post: any) => post.data?.excerpt ?? post.data?.description ?? '';
const getCategory = (post: any) => post.data?.category ?? null;
---

<!DOCTYPE html>
<html>
  <Header
    title={`Blog | Page ${page}`}
    canonical={pageHref(page)}
    prevHref={page > 1 ? pageHref(page - 1) : undefined}
    nextHref={page < totalPages ? pageHref(page + 1) : undefined}
    jsonLd={{
      '@context': 'https://schema.org',
      '@type': 'CollectionPage',
      name: `Blog - Page ${page}`,
      url: pageHref(page),
      isPartOf: { '@type': 'Blog', name: 'Blog', url: '/blog/' },
      itemListElement: paginated.map((p, i) => ({
        '@type': 'ListItem',
        position: (page - 1) * pageSize + i + 1,
        url: `/blog/${p.slug}/`,
        name: p.data.title,
      })),
    }}
  />
  <body>
    <div class="content">
      <Sidebar selectedItem="blog" />
      <nav class="main">
        <div class="container">
          <div class="back-nav-container">
            <a href="/" class="back-nav-button w-inline-block">
              <Icon name="back" class="back-nav-img" />
              <div>Back</div>
            </a>
          </div>

          <div class="content-container">
            <h1>Blog</h1>
            <section class="items-container">
              <div class="resouce-items">
                {paginated.map((post) => {
                  const hero = getHero(post);
                  const excerpt = getExcerpt(post);
                  const dateLabel = post.date
                    ? post.date.toLocaleDateString('id-ID', { dateStyle: 'medium' })
                    : null;
                  return (
                    <a href={`/blog/${post.slug}/`} class="w-inline-block post-card__link">
                      <article class="resource-card post-card">
                        <div class="post-card__inner">
                          <div class="post-card__thumb">
                            {hero ? (
                              <img
                                src={hero.src}
                                width={hero.width}
                                height={hero.height}
                                alt={post.data.heroAlt ?? post.data.title}
                                loading="lazy"
                                class="post-card__img"
                              />
                            ) : (
                              <div class="post-card__thumb--placeholder" aria-hidden="true"></div>
                            )}
                          </div>
                          <div class="post-card__body">
                            <header class="post-card__header">
                              <h2 class="post-card__title">{post.data.title}</h2>
                              <div class="post-card__meta">
                                {getCategory(post) && (
                                  <div class="post-card__meta-item">
                                    <Icon name="tags" class="post-card__meta-icon" />
                                    <span class="post-card__category">{getCategory(post)}</span>
                                  </div>
                                )}
                                {dateLabel && (
                                  <div class="post-card__meta-item">
                                    <Icon name="date" class="post-card__meta-icon" />
                                    <time datetime={post.date?.toISOString()} class="post-card__date">
                                      {dateLabel}
                                    </time>
                                  </div>
                                )}
                              </div>
                            </header>
                            {excerpt && <p class="post-card__excerpt">{excerpt}</p>}
                            <span class="post-card__readmore">
                              <span>Read more</span>
                              <Icon name="readmore" class="post-card__readmore-icon" />
                            </span>
                          </div>
                        </div>
                      </article>
                    </a>
                  );
                })}

                {posts.length === 0 && (
                  <p style="opacity:.8;">Belum ada tulisan. Tambahkan file di <code>src/content/blog/[slug]/index.md</code> ya ✍️</p>
                )}

                {posts.length > pageSize && (
                  <nav aria-label="Pagination" style="display:flex; gap:.5rem; align-items:center; justify-content:center; margin-top:1rem;">
                    {page > 1 && (
                      <a href={pageHref(page - 1)} style="padding:.4rem .7rem; border:1px solid var(--border, rgba(0,0,0,.08)); border-radius:8px; text-decoration:none;">Prev</a>
                    )}
                    {Array.from({ length: totalPages }).map((_, i) => {
                      const n = i + 1;
                      const active = n === page;
                      return (
                        <a
                          href={pageHref(n)}
                          aria-current={active ? 'page' : undefined}
                          style={`padding:.4rem .7rem; border:1px solid var(--border, rgba(0,0,0,.08)); border-radius:8px; text-decoration:none; ${active ? 'background: var(--surface-2, rgba(0,0,0,.06)); font-weight:600;' : ''}`}
                        >
                          {n}
                        </a>
                      );
                    })}
                    {page < totalPages && (
                      <a href={pageHref(page + 1)} style="padding:.4rem .7rem; border:1px solid var(--border, rgba(0,0,0,.08)); border-radius:8px; text-decoration:none;">Next</a>
                    )}
                  </nav>
                )}
              </div>
            </section>
          </div>
        </div>
        <Footer />
      </nav>
    </div>

    <style></style>
  </body>
</html>
