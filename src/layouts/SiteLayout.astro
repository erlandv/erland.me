---
import Header from "../components/Header.astro";
// Consolidated global styles at layout level
import "../styles/base.css";
import "../styles/variables.css";
import "../styles/styles.css";
import "../styles/gallery.css";
import "../styles/lightbox.css";
import Sidebar from "../components/Sidebar.astro";
import SidebarController from "../components/SidebarController.astro";
import Footer from "../components/Footer.astro";

interface Props {
  title: string;
  selectedItem?: string;
  canonical?: string;
  prevHref?: string;
  nextHref?: string;
  jsonLd?: any;
  description?: string;
  image?: string;
  type?: 'website' | 'article' | 'profile';
  publishedTime?: Date | string;
  modifiedTime?: Date | string;
  tags?: string[];
  author?: string;
  showSidebar?: boolean;
}

const { 
  title, 
  selectedItem, 
  canonical, 
  prevHref, 
  nextHref, 
  jsonLd,
  description,
  image,
  type,
  publishedTime,
  modifiedTime,
  tags,
  author,
  showSidebar = true
} = Astro.props as Props;
---

<!DOCTYPE html>
<html>
  <Header 
    title={title} 
    canonical={canonical} 
    prevHref={prevHref} 
    nextHref={nextHref} 
    jsonLd={jsonLd}
    description={description}
    image={image}
    type={type}
    publishedTime={publishedTime}
    modifiedTime={modifiedTime}
    tags={tags}
    author={author}
  />
  <body>
    <div class="content">
      {showSidebar && <Sidebar selectedItem={selectedItem} />}
      {showSidebar && <SidebarController />}
      <nav class="main">
        <div class="container">
          <slot />
        </div>
        <Footer />
      </nav>
    </div>
    <script>
      // Initialize router-safe share buttons globally
      (async () => {
        try {
          const mod = await import('../lib/share-buttons');
          mod.autoInit();
        } catch (e) {
          console.error('ShareButtons init error:', e);
        }
      })();
    </script>
    <script>
      // Initialize toast container early
      (async () => {
        try {
          const mod = await import('../lib/toast');
          mod.initToasts();
        } catch (e) {
          console.error('Toast init error:', e);
        }
      })();
    </script>
    <script>
      // Initialize router-safe code copy buttons globally
      (async () => {
        try {
          const mod = await import('../lib/code-copy');
          mod.autoInit();
        } catch (e) {
          console.error('CodeCopy init error:', e);
        }
      })();
    </script>
    <script>
      // Initialize router-safe image lightbox globally
      (async () => {
        try {
          const mod = await import('../lib/lightbox');
          mod.autoInit();
        } catch (e) {
          console.error('Lightbox init error:', e);
        }
      })();
    </script>
  </body>
  
</html>
