---
import Header from "../components/Header.astro";
/* Consolidated global styles at layout level: load variables first for clarity and cascade */
import "../styles/variables.css";
import "../styles/base.css";
import "../styles/styles.css";
import "../styles/layout/site-layout.css";
import "../styles/gallery.css";
import "../styles/lightbox.css";
import "../styles/pages/button.module.css";
import Sidebar from "../components/Sidebar.astro";
import SidebarController from "../components/SidebarController.astro";
import Footer from "../components/Footer.astro";
import SidebarToggleButton from "../components/SidebarToggleButton.astro";
import SidebarSocialFlyout from "../components/SidebarSocialFlyout.astro";
import { GTM_ID } from "../lib/env";
import { isProductionSite } from "../lib/seo";

interface Props {
  title: string;
  selectedItem?: string;
  canonical?: string;
  prevHref?: string;
  nextHref?: string;
  jsonLd?: any;
  description?: string;
  image?: string;
  type?: 'website' | 'article' | 'profile';
  publishedTime?: Date | string;
  modifiedTime?: Date | string;
  tags?: string[];
  author?: string;
  showSidebar?: boolean;
  preloadSearch?: boolean;
}

/**
 * Helper signature: (sel: string) => boolean
 * Checks if a CSS selector matches any element in the document.
 */

const {
  title,
  selectedItem,
  canonical,
  prevHref,
  nextHref,
  jsonLd,
  description,
  image,
  type,
  publishedTime,
  modifiedTime,
  tags,
  author,
  showSidebar = true,
  preloadSearch = false
} = Astro.props as Props;
---

<!DOCTYPE html>
<html lang="id">
  <Header
    title={title}
    canonical={canonical}
    prevHref={prevHref}
    nextHref={nextHref}
    jsonLd={jsonLd}
    description={description}
    image={image}
    type={type}
    publishedTime={publishedTime}
    modifiedTime={modifiedTime}
    tags={tags}
    author={author}
    preloadSearch={preloadSearch}
  />
  <body>
    {import.meta.env.PROD && isProductionSite() && GTM_ID && (
      <noscript><iframe src={`https://www.googletagmanager.com/ns.html?id=${GTM_ID}`} height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    )}
    <div class="content">
      {showSidebar && <Sidebar selectedItem={selectedItem} />}
      {showSidebar && <SidebarController />}
      {showSidebar && <SidebarToggleButton />}
      {showSidebar && <SidebarSocialFlyout />}
      <nav class="main">
        <div class="container">
          <slot />
        </div>
        <Footer />
      </nav>
    </div>
    <script>
      // @ts-nocheck
      // Global UI gate: import '../lib/ui-init' only when needed
      (() => {
        // Checks if a CSS selector matches any element in the document.
        function has(sel) {
          return !!document.querySelector(sel);
        }
        const check = () => ({
          share: has('section.share') || has('.share__btn--copy') || has('.share__btn--native'),
          copy: has('pre code') || has('pre[class*="language-"]'),
          lightbox:
            has('.prose img:not(.hero-image)') ||
            has('.content-image-grid img:not(.hero-image)'),
        });

        const runImport = () => {
          import('../lib/ui-init')
            .then(m => m.initUi && m.initUi())
            .catch(e => console.error('ui-init import error:', e));
        };

        const s = check();
        if (s.share || s.copy || s.lightbox) {
          runImport();
        } else {
          const reGate = () => {
            const q = check();
            if (q.share || q.copy || q.lightbox) {
              document.removeEventListener('astro:page-load', reGate);
              document.removeEventListener('astro:after-swap', reGate);
              import('../lib/ui-init')
                .then(m => m.initUi && m.initUi())
                .catch(e => console.error('ui-init import error:', e));
            }
          };
          document.addEventListener('astro:page-load', reGate);
          document.addEventListener('astro:after-swap', reGate);
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', reGate, { once: true });
          } else {
            setTimeout(reGate, 50);
          }
        }
      })();
    </script>
    <script>
      // Web Vitals Performance Monitoring
      // Only runs in production, sends metrics to GTM
      if (import.meta.env.PROD) {
        import('../lib/web-vitals')
          .then(m => m.initWebVitals && m.initWebVitals())
          .catch(e => console.error('web-vitals init error:', e));
      }
    </script>
  </body>
  
</html>
